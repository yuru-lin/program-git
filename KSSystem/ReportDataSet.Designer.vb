'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.8745
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReportDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReportDataSet
    Inherits Global.System.Data.DataSet
    
    Private tabledtThroughput As dtThroughputDataTable
    
    Private tabledtMelts As dtMeltsDataTable
    
    Private tabledtTransport As dtTransportDataTable
    
    Private tabledtFeeding As dtFeedingDataTable
    
    Private tabledtOutDetail As dtOutDetailDataTable
    
    Private tabledtOutStatistic As dtOutStatisticDataTable
    
    Private tabledtInDetail As dtInDetailDataTable
    
    Private tabledtInStatistic As dtInStatisticDataTable
    
    Private tabledtAdjustDetail As dtAdjustDetailDataTable
    
    Private tabledtAdjustStatistic As dtAdjustStatisticDataTable
    
    Private tabledtCarDrDetail As dtCarDrDetailDataTable
    
    Private tabledtCarDrStatistic As dtCarDrStatisticDataTable
    
    Private tabledtEBStatistic As dtEBStatisticDataTable
    
    Private tableEBStatement As EBStatementDataTable
    
    Private tabledtCSDGV1 As dtCSDGV1DataTable
    
    Private tabledtCSDGV5 As dtCSDGV5DataTable
    
    Private tabledtCSDGV2 As dtCSDGV2DataTable
    
    Private tabledtCSDGV3 As dtCSDGV3DataTable
    
    Private tabledtCSDGV4 As dtCSDGV4DataTable
    
    Private tabledtPayment1 As dtPayment1DataTable
    
    Private tabledtPayment2 As dtPayment2DataTable
    
    Private tabledtPayment3 As dtPayment3DataTable
    
    Private tabledtScheduling As dtSchedulingDataTable
    
    Private tabledtSPicking As dtSPickingDataTable
    
    Private tabledtSPicking1 As dtSPicking1DataTable
    
    Private tabledtDispatching As dtDispatchingDataTable
    
    Private tabledt_KS_Z_StockApply_Detail As dt_KS_Z_StockApply_DetailDataTable
    
    Private tabledt_KS_Z_Welfare As dt_KS_Z_WelfareDataTable
    
    Private tabledt_KS_A_EC_Detail As dt_KS_A_EC_DetailDataTable
    
    Private tabledt_KS_A_ECOrder_Detail As dt_KS_A_ECOrder_DetailDataTable
    
    Private tabledt_加工原料肉領料單 As dt_加工原料肉領料單DataTable
    
    Private tabledt_冷藏貨庫存表 As dt_冷藏貨庫存表DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtThroughput")) Is Nothing) Then
                MyBase.Tables.Add(New dtThroughputDataTable(ds.Tables("dtThroughput")))
            End If
            If (Not (ds.Tables("dtMelts")) Is Nothing) Then
                MyBase.Tables.Add(New dtMeltsDataTable(ds.Tables("dtMelts")))
            End If
            If (Not (ds.Tables("dtTransport")) Is Nothing) Then
                MyBase.Tables.Add(New dtTransportDataTable(ds.Tables("dtTransport")))
            End If
            If (Not (ds.Tables("dtFeeding")) Is Nothing) Then
                MyBase.Tables.Add(New dtFeedingDataTable(ds.Tables("dtFeeding")))
            End If
            If (Not (ds.Tables("dtOutDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtOutDetailDataTable(ds.Tables("dtOutDetail")))
            End If
            If (Not (ds.Tables("dtOutStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtOutStatisticDataTable(ds.Tables("dtOutStatistic")))
            End If
            If (Not (ds.Tables("dtInDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtInDetailDataTable(ds.Tables("dtInDetail")))
            End If
            If (Not (ds.Tables("dtInStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtInStatisticDataTable(ds.Tables("dtInStatistic")))
            End If
            If (Not (ds.Tables("dtAdjustDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtAdjustDetailDataTable(ds.Tables("dtAdjustDetail")))
            End If
            If (Not (ds.Tables("dtAdjustStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtAdjustStatisticDataTable(ds.Tables("dtAdjustStatistic")))
            End If
            If (Not (ds.Tables("dtCarDrDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtCarDrDetailDataTable(ds.Tables("dtCarDrDetail")))
            End If
            If (Not (ds.Tables("dtCarDrStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtCarDrStatisticDataTable(ds.Tables("dtCarDrStatistic")))
            End If
            If (Not (ds.Tables("dtEBStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtEBStatisticDataTable(ds.Tables("dtEBStatistic")))
            End If
            If (Not (ds.Tables("EBStatement")) Is Nothing) Then
                MyBase.Tables.Add(New EBStatementDataTable(ds.Tables("EBStatement")))
            End If
            If (Not (ds.Tables("dtCSDGV1")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV1DataTable(ds.Tables("dtCSDGV1")))
            End If
            If (Not (ds.Tables("dtCSDGV5")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV5DataTable(ds.Tables("dtCSDGV5")))
            End If
            If (Not (ds.Tables("dtCSDGV2")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV2DataTable(ds.Tables("dtCSDGV2")))
            End If
            If (Not (ds.Tables("dtCSDGV3")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV3DataTable(ds.Tables("dtCSDGV3")))
            End If
            If (Not (ds.Tables("dtCSDGV4")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV4DataTable(ds.Tables("dtCSDGV4")))
            End If
            If (Not (ds.Tables("dtPayment1")) Is Nothing) Then
                MyBase.Tables.Add(New dtPayment1DataTable(ds.Tables("dtPayment1")))
            End If
            If (Not (ds.Tables("dtPayment2")) Is Nothing) Then
                MyBase.Tables.Add(New dtPayment2DataTable(ds.Tables("dtPayment2")))
            End If
            If (Not (ds.Tables("dtPayment3")) Is Nothing) Then
                MyBase.Tables.Add(New dtPayment3DataTable(ds.Tables("dtPayment3")))
            End If
            If (Not (ds.Tables("dtScheduling")) Is Nothing) Then
                MyBase.Tables.Add(New dtSchedulingDataTable(ds.Tables("dtScheduling")))
            End If
            If (Not (ds.Tables("dtSPicking")) Is Nothing) Then
                MyBase.Tables.Add(New dtSPickingDataTable(ds.Tables("dtSPicking")))
            End If
            If (Not (ds.Tables("dtSPicking1")) Is Nothing) Then
                MyBase.Tables.Add(New dtSPicking1DataTable(ds.Tables("dtSPicking1")))
            End If
            If (Not (ds.Tables("dtDispatching")) Is Nothing) Then
                MyBase.Tables.Add(New dtDispatchingDataTable(ds.Tables("dtDispatching")))
            End If
            If (Not (ds.Tables("dt_KS_Z_StockApply_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New dt_KS_Z_StockApply_DetailDataTable(ds.Tables("dt_KS_Z_StockApply_Detail")))
            End If
            If (Not (ds.Tables("dt_KS_Z_Welfare")) Is Nothing) Then
                MyBase.Tables.Add(New dt_KS_Z_WelfareDataTable(ds.Tables("dt_KS_Z_Welfare")))
            End If
            If (Not (ds.Tables("dt_KS_A_EC_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New dt_KS_A_EC_DetailDataTable(ds.Tables("dt_KS_A_EC_Detail")))
            End If
            If (Not (ds.Tables("dt_KS_A_ECOrder_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New dt_KS_A_ECOrder_DetailDataTable(ds.Tables("dt_KS_A_ECOrder_Detail")))
            End If
            If (Not (ds.Tables("dt_加工原料肉領料單")) Is Nothing) Then
                MyBase.Tables.Add(New dt_加工原料肉領料單DataTable(ds.Tables("dt_加工原料肉領料單")))
            End If
            If (Not (ds.Tables("dt_冷藏貨庫存表")) Is Nothing) Then
                MyBase.Tables.Add(New dt_冷藏貨庫存表DataTable(ds.Tables("dt_冷藏貨庫存表")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtThroughput() As dtThroughputDataTable
        Get
            Return Me.tabledtThroughput
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtMelts() As dtMeltsDataTable
        Get
            Return Me.tabledtMelts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtTransport() As dtTransportDataTable
        Get
            Return Me.tabledtTransport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtFeeding() As dtFeedingDataTable
        Get
            Return Me.tabledtFeeding
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtOutDetail() As dtOutDetailDataTable
        Get
            Return Me.tabledtOutDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtOutStatistic() As dtOutStatisticDataTable
        Get
            Return Me.tabledtOutStatistic
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtInDetail() As dtInDetailDataTable
        Get
            Return Me.tabledtInDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtInStatistic() As dtInStatisticDataTable
        Get
            Return Me.tabledtInStatistic
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtAdjustDetail() As dtAdjustDetailDataTable
        Get
            Return Me.tabledtAdjustDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtAdjustStatistic() As dtAdjustStatisticDataTable
        Get
            Return Me.tabledtAdjustStatistic
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCarDrDetail() As dtCarDrDetailDataTable
        Get
            Return Me.tabledtCarDrDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCarDrStatistic() As dtCarDrStatisticDataTable
        Get
            Return Me.tabledtCarDrStatistic
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtEBStatistic() As dtEBStatisticDataTable
        Get
            Return Me.tabledtEBStatistic
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EBStatement() As EBStatementDataTable
        Get
            Return Me.tableEBStatement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCSDGV1() As dtCSDGV1DataTable
        Get
            Return Me.tabledtCSDGV1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCSDGV5() As dtCSDGV5DataTable
        Get
            Return Me.tabledtCSDGV5
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCSDGV2() As dtCSDGV2DataTable
        Get
            Return Me.tabledtCSDGV2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCSDGV3() As dtCSDGV3DataTable
        Get
            Return Me.tabledtCSDGV3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCSDGV4() As dtCSDGV4DataTable
        Get
            Return Me.tabledtCSDGV4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPayment1() As dtPayment1DataTable
        Get
            Return Me.tabledtPayment1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPayment2() As dtPayment2DataTable
        Get
            Return Me.tabledtPayment2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPayment3() As dtPayment3DataTable
        Get
            Return Me.tabledtPayment3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtScheduling() As dtSchedulingDataTable
        Get
            Return Me.tabledtScheduling
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtSPicking() As dtSPickingDataTable
        Get
            Return Me.tabledtSPicking
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtSPicking1() As dtSPicking1DataTable
        Get
            Return Me.tabledtSPicking1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtDispatching() As dtDispatchingDataTable
        Get
            Return Me.tabledtDispatching
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_KS_Z_StockApply_Detail() As dt_KS_Z_StockApply_DetailDataTable
        Get
            Return Me.tabledt_KS_Z_StockApply_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_KS_Z_Welfare() As dt_KS_Z_WelfareDataTable
        Get
            Return Me.tabledt_KS_Z_Welfare
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_KS_A_EC_Detail() As dt_KS_A_EC_DetailDataTable
        Get
            Return Me.tabledt_KS_A_EC_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_KS_A_ECOrder_Detail() As dt_KS_A_ECOrder_DetailDataTable
        Get
            Return Me.tabledt_KS_A_ECOrder_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_加工原料肉領料單() As dt_加工原料肉領料單DataTable
        Get
            Return Me.tabledt_加工原料肉領料單
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_冷藏貨庫存表() As dt_冷藏貨庫存表DataTable
        Get
            Return Me.tabledt_冷藏貨庫存表
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReportDataSet = CType(MyBase.Clone,ReportDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtThroughput")) Is Nothing) Then
                MyBase.Tables.Add(New dtThroughputDataTable(ds.Tables("dtThroughput")))
            End If
            If (Not (ds.Tables("dtMelts")) Is Nothing) Then
                MyBase.Tables.Add(New dtMeltsDataTable(ds.Tables("dtMelts")))
            End If
            If (Not (ds.Tables("dtTransport")) Is Nothing) Then
                MyBase.Tables.Add(New dtTransportDataTable(ds.Tables("dtTransport")))
            End If
            If (Not (ds.Tables("dtFeeding")) Is Nothing) Then
                MyBase.Tables.Add(New dtFeedingDataTable(ds.Tables("dtFeeding")))
            End If
            If (Not (ds.Tables("dtOutDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtOutDetailDataTable(ds.Tables("dtOutDetail")))
            End If
            If (Not (ds.Tables("dtOutStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtOutStatisticDataTable(ds.Tables("dtOutStatistic")))
            End If
            If (Not (ds.Tables("dtInDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtInDetailDataTable(ds.Tables("dtInDetail")))
            End If
            If (Not (ds.Tables("dtInStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtInStatisticDataTable(ds.Tables("dtInStatistic")))
            End If
            If (Not (ds.Tables("dtAdjustDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtAdjustDetailDataTable(ds.Tables("dtAdjustDetail")))
            End If
            If (Not (ds.Tables("dtAdjustStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtAdjustStatisticDataTable(ds.Tables("dtAdjustStatistic")))
            End If
            If (Not (ds.Tables("dtCarDrDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtCarDrDetailDataTable(ds.Tables("dtCarDrDetail")))
            End If
            If (Not (ds.Tables("dtCarDrStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtCarDrStatisticDataTable(ds.Tables("dtCarDrStatistic")))
            End If
            If (Not (ds.Tables("dtEBStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New dtEBStatisticDataTable(ds.Tables("dtEBStatistic")))
            End If
            If (Not (ds.Tables("EBStatement")) Is Nothing) Then
                MyBase.Tables.Add(New EBStatementDataTable(ds.Tables("EBStatement")))
            End If
            If (Not (ds.Tables("dtCSDGV1")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV1DataTable(ds.Tables("dtCSDGV1")))
            End If
            If (Not (ds.Tables("dtCSDGV5")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV5DataTable(ds.Tables("dtCSDGV5")))
            End If
            If (Not (ds.Tables("dtCSDGV2")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV2DataTable(ds.Tables("dtCSDGV2")))
            End If
            If (Not (ds.Tables("dtCSDGV3")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV3DataTable(ds.Tables("dtCSDGV3")))
            End If
            If (Not (ds.Tables("dtCSDGV4")) Is Nothing) Then
                MyBase.Tables.Add(New dtCSDGV4DataTable(ds.Tables("dtCSDGV4")))
            End If
            If (Not (ds.Tables("dtPayment1")) Is Nothing) Then
                MyBase.Tables.Add(New dtPayment1DataTable(ds.Tables("dtPayment1")))
            End If
            If (Not (ds.Tables("dtPayment2")) Is Nothing) Then
                MyBase.Tables.Add(New dtPayment2DataTable(ds.Tables("dtPayment2")))
            End If
            If (Not (ds.Tables("dtPayment3")) Is Nothing) Then
                MyBase.Tables.Add(New dtPayment3DataTable(ds.Tables("dtPayment3")))
            End If
            If (Not (ds.Tables("dtScheduling")) Is Nothing) Then
                MyBase.Tables.Add(New dtSchedulingDataTable(ds.Tables("dtScheduling")))
            End If
            If (Not (ds.Tables("dtSPicking")) Is Nothing) Then
                MyBase.Tables.Add(New dtSPickingDataTable(ds.Tables("dtSPicking")))
            End If
            If (Not (ds.Tables("dtSPicking1")) Is Nothing) Then
                MyBase.Tables.Add(New dtSPicking1DataTable(ds.Tables("dtSPicking1")))
            End If
            If (Not (ds.Tables("dtDispatching")) Is Nothing) Then
                MyBase.Tables.Add(New dtDispatchingDataTable(ds.Tables("dtDispatching")))
            End If
            If (Not (ds.Tables("dt_KS_Z_StockApply_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New dt_KS_Z_StockApply_DetailDataTable(ds.Tables("dt_KS_Z_StockApply_Detail")))
            End If
            If (Not (ds.Tables("dt_KS_Z_Welfare")) Is Nothing) Then
                MyBase.Tables.Add(New dt_KS_Z_WelfareDataTable(ds.Tables("dt_KS_Z_Welfare")))
            End If
            If (Not (ds.Tables("dt_KS_A_EC_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New dt_KS_A_EC_DetailDataTable(ds.Tables("dt_KS_A_EC_Detail")))
            End If
            If (Not (ds.Tables("dt_KS_A_ECOrder_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New dt_KS_A_ECOrder_DetailDataTable(ds.Tables("dt_KS_A_ECOrder_Detail")))
            End If
            If (Not (ds.Tables("dt_加工原料肉領料單")) Is Nothing) Then
                MyBase.Tables.Add(New dt_加工原料肉領料單DataTable(ds.Tables("dt_加工原料肉領料單")))
            End If
            If (Not (ds.Tables("dt_冷藏貨庫存表")) Is Nothing) Then
                MyBase.Tables.Add(New dt_冷藏貨庫存表DataTable(ds.Tables("dt_冷藏貨庫存表")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtThroughput = CType(MyBase.Tables("dtThroughput"),dtThroughputDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtThroughput) Is Nothing) Then
                Me.tabledtThroughput.InitVars
            End If
        End If
        Me.tabledtMelts = CType(MyBase.Tables("dtMelts"),dtMeltsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtMelts) Is Nothing) Then
                Me.tabledtMelts.InitVars
            End If
        End If
        Me.tabledtTransport = CType(MyBase.Tables("dtTransport"),dtTransportDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtTransport) Is Nothing) Then
                Me.tabledtTransport.InitVars
            End If
        End If
        Me.tabledtFeeding = CType(MyBase.Tables("dtFeeding"),dtFeedingDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtFeeding) Is Nothing) Then
                Me.tabledtFeeding.InitVars
            End If
        End If
        Me.tabledtOutDetail = CType(MyBase.Tables("dtOutDetail"),dtOutDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtOutDetail) Is Nothing) Then
                Me.tabledtOutDetail.InitVars
            End If
        End If
        Me.tabledtOutStatistic = CType(MyBase.Tables("dtOutStatistic"),dtOutStatisticDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtOutStatistic) Is Nothing) Then
                Me.tabledtOutStatistic.InitVars
            End If
        End If
        Me.tabledtInDetail = CType(MyBase.Tables("dtInDetail"),dtInDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtInDetail) Is Nothing) Then
                Me.tabledtInDetail.InitVars
            End If
        End If
        Me.tabledtInStatistic = CType(MyBase.Tables("dtInStatistic"),dtInStatisticDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtInStatistic) Is Nothing) Then
                Me.tabledtInStatistic.InitVars
            End If
        End If
        Me.tabledtAdjustDetail = CType(MyBase.Tables("dtAdjustDetail"),dtAdjustDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtAdjustDetail) Is Nothing) Then
                Me.tabledtAdjustDetail.InitVars
            End If
        End If
        Me.tabledtAdjustStatistic = CType(MyBase.Tables("dtAdjustStatistic"),dtAdjustStatisticDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtAdjustStatistic) Is Nothing) Then
                Me.tabledtAdjustStatistic.InitVars
            End If
        End If
        Me.tabledtCarDrDetail = CType(MyBase.Tables("dtCarDrDetail"),dtCarDrDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCarDrDetail) Is Nothing) Then
                Me.tabledtCarDrDetail.InitVars
            End If
        End If
        Me.tabledtCarDrStatistic = CType(MyBase.Tables("dtCarDrStatistic"),dtCarDrStatisticDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCarDrStatistic) Is Nothing) Then
                Me.tabledtCarDrStatistic.InitVars
            End If
        End If
        Me.tabledtEBStatistic = CType(MyBase.Tables("dtEBStatistic"),dtEBStatisticDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtEBStatistic) Is Nothing) Then
                Me.tabledtEBStatistic.InitVars
            End If
        End If
        Me.tableEBStatement = CType(MyBase.Tables("EBStatement"),EBStatementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEBStatement) Is Nothing) Then
                Me.tableEBStatement.InitVars
            End If
        End If
        Me.tabledtCSDGV1 = CType(MyBase.Tables("dtCSDGV1"),dtCSDGV1DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCSDGV1) Is Nothing) Then
                Me.tabledtCSDGV1.InitVars
            End If
        End If
        Me.tabledtCSDGV5 = CType(MyBase.Tables("dtCSDGV5"),dtCSDGV5DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCSDGV5) Is Nothing) Then
                Me.tabledtCSDGV5.InitVars
            End If
        End If
        Me.tabledtCSDGV2 = CType(MyBase.Tables("dtCSDGV2"),dtCSDGV2DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCSDGV2) Is Nothing) Then
                Me.tabledtCSDGV2.InitVars
            End If
        End If
        Me.tabledtCSDGV3 = CType(MyBase.Tables("dtCSDGV3"),dtCSDGV3DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCSDGV3) Is Nothing) Then
                Me.tabledtCSDGV3.InitVars
            End If
        End If
        Me.tabledtCSDGV4 = CType(MyBase.Tables("dtCSDGV4"),dtCSDGV4DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCSDGV4) Is Nothing) Then
                Me.tabledtCSDGV4.InitVars
            End If
        End If
        Me.tabledtPayment1 = CType(MyBase.Tables("dtPayment1"),dtPayment1DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPayment1) Is Nothing) Then
                Me.tabledtPayment1.InitVars
            End If
        End If
        Me.tabledtPayment2 = CType(MyBase.Tables("dtPayment2"),dtPayment2DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPayment2) Is Nothing) Then
                Me.tabledtPayment2.InitVars
            End If
        End If
        Me.tabledtPayment3 = CType(MyBase.Tables("dtPayment3"),dtPayment3DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPayment3) Is Nothing) Then
                Me.tabledtPayment3.InitVars
            End If
        End If
        Me.tabledtScheduling = CType(MyBase.Tables("dtScheduling"),dtSchedulingDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtScheduling) Is Nothing) Then
                Me.tabledtScheduling.InitVars
            End If
        End If
        Me.tabledtSPicking = CType(MyBase.Tables("dtSPicking"),dtSPickingDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtSPicking) Is Nothing) Then
                Me.tabledtSPicking.InitVars
            End If
        End If
        Me.tabledtSPicking1 = CType(MyBase.Tables("dtSPicking1"),dtSPicking1DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtSPicking1) Is Nothing) Then
                Me.tabledtSPicking1.InitVars
            End If
        End If
        Me.tabledtDispatching = CType(MyBase.Tables("dtDispatching"),dtDispatchingDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtDispatching) Is Nothing) Then
                Me.tabledtDispatching.InitVars
            End If
        End If
        Me.tabledt_KS_Z_StockApply_Detail = CType(MyBase.Tables("dt_KS_Z_StockApply_Detail"),dt_KS_Z_StockApply_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_KS_Z_StockApply_Detail) Is Nothing) Then
                Me.tabledt_KS_Z_StockApply_Detail.InitVars
            End If
        End If
        Me.tabledt_KS_Z_Welfare = CType(MyBase.Tables("dt_KS_Z_Welfare"),dt_KS_Z_WelfareDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_KS_Z_Welfare) Is Nothing) Then
                Me.tabledt_KS_Z_Welfare.InitVars
            End If
        End If
        Me.tabledt_KS_A_EC_Detail = CType(MyBase.Tables("dt_KS_A_EC_Detail"),dt_KS_A_EC_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_KS_A_EC_Detail) Is Nothing) Then
                Me.tabledt_KS_A_EC_Detail.InitVars
            End If
        End If
        Me.tabledt_KS_A_ECOrder_Detail = CType(MyBase.Tables("dt_KS_A_ECOrder_Detail"),dt_KS_A_ECOrder_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_KS_A_ECOrder_Detail) Is Nothing) Then
                Me.tabledt_KS_A_ECOrder_Detail.InitVars
            End If
        End If
        Me.tabledt_加工原料肉領料單 = CType(MyBase.Tables("dt_加工原料肉領料單"),dt_加工原料肉領料單DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_加工原料肉領料單) Is Nothing) Then
                Me.tabledt_加工原料肉領料單.InitVars
            End If
        End If
        Me.tabledt_冷藏貨庫存表 = CType(MyBase.Tables("dt_冷藏貨庫存表"),dt_冷藏貨庫存表DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_冷藏貨庫存表) Is Nothing) Then
                Me.tabledt_冷藏貨庫存表.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ReportDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ReportDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtThroughput = New dtThroughputDataTable
        MyBase.Tables.Add(Me.tabledtThroughput)
        Me.tabledtMelts = New dtMeltsDataTable
        MyBase.Tables.Add(Me.tabledtMelts)
        Me.tabledtTransport = New dtTransportDataTable
        MyBase.Tables.Add(Me.tabledtTransport)
        Me.tabledtFeeding = New dtFeedingDataTable
        MyBase.Tables.Add(Me.tabledtFeeding)
        Me.tabledtOutDetail = New dtOutDetailDataTable
        MyBase.Tables.Add(Me.tabledtOutDetail)
        Me.tabledtOutStatistic = New dtOutStatisticDataTable
        MyBase.Tables.Add(Me.tabledtOutStatistic)
        Me.tabledtInDetail = New dtInDetailDataTable
        MyBase.Tables.Add(Me.tabledtInDetail)
        Me.tabledtInStatistic = New dtInStatisticDataTable
        MyBase.Tables.Add(Me.tabledtInStatistic)
        Me.tabledtAdjustDetail = New dtAdjustDetailDataTable
        MyBase.Tables.Add(Me.tabledtAdjustDetail)
        Me.tabledtAdjustStatistic = New dtAdjustStatisticDataTable
        MyBase.Tables.Add(Me.tabledtAdjustStatistic)
        Me.tabledtCarDrDetail = New dtCarDrDetailDataTable
        MyBase.Tables.Add(Me.tabledtCarDrDetail)
        Me.tabledtCarDrStatistic = New dtCarDrStatisticDataTable
        MyBase.Tables.Add(Me.tabledtCarDrStatistic)
        Me.tabledtEBStatistic = New dtEBStatisticDataTable
        MyBase.Tables.Add(Me.tabledtEBStatistic)
        Me.tableEBStatement = New EBStatementDataTable
        MyBase.Tables.Add(Me.tableEBStatement)
        Me.tabledtCSDGV1 = New dtCSDGV1DataTable
        MyBase.Tables.Add(Me.tabledtCSDGV1)
        Me.tabledtCSDGV5 = New dtCSDGV5DataTable
        MyBase.Tables.Add(Me.tabledtCSDGV5)
        Me.tabledtCSDGV2 = New dtCSDGV2DataTable
        MyBase.Tables.Add(Me.tabledtCSDGV2)
        Me.tabledtCSDGV3 = New dtCSDGV3DataTable
        MyBase.Tables.Add(Me.tabledtCSDGV3)
        Me.tabledtCSDGV4 = New dtCSDGV4DataTable
        MyBase.Tables.Add(Me.tabledtCSDGV4)
        Me.tabledtPayment1 = New dtPayment1DataTable
        MyBase.Tables.Add(Me.tabledtPayment1)
        Me.tabledtPayment2 = New dtPayment2DataTable
        MyBase.Tables.Add(Me.tabledtPayment2)
        Me.tabledtPayment3 = New dtPayment3DataTable
        MyBase.Tables.Add(Me.tabledtPayment3)
        Me.tabledtScheduling = New dtSchedulingDataTable
        MyBase.Tables.Add(Me.tabledtScheduling)
        Me.tabledtSPicking = New dtSPickingDataTable
        MyBase.Tables.Add(Me.tabledtSPicking)
        Me.tabledtSPicking1 = New dtSPicking1DataTable
        MyBase.Tables.Add(Me.tabledtSPicking1)
        Me.tabledtDispatching = New dtDispatchingDataTable
        MyBase.Tables.Add(Me.tabledtDispatching)
        Me.tabledt_KS_Z_StockApply_Detail = New dt_KS_Z_StockApply_DetailDataTable
        MyBase.Tables.Add(Me.tabledt_KS_Z_StockApply_Detail)
        Me.tabledt_KS_Z_Welfare = New dt_KS_Z_WelfareDataTable
        MyBase.Tables.Add(Me.tabledt_KS_Z_Welfare)
        Me.tabledt_KS_A_EC_Detail = New dt_KS_A_EC_DetailDataTable
        MyBase.Tables.Add(Me.tabledt_KS_A_EC_Detail)
        Me.tabledt_KS_A_ECOrder_Detail = New dt_KS_A_ECOrder_DetailDataTable
        MyBase.Tables.Add(Me.tabledt_KS_A_ECOrder_Detail)
        Me.tabledt_加工原料肉領料單 = New dt_加工原料肉領料單DataTable
        MyBase.Tables.Add(Me.tabledt_加工原料肉領料單)
        Me.tabledt_冷藏貨庫存表 = New dt_冷藏貨庫存表DataTable
        MyBase.Tables.Add(Me.tabledt_冷藏貨庫存表)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtThroughput() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtMelts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtTransport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtFeeding() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtOutDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtOutStatistic() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtInDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtInStatistic() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtAdjustDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtAdjustStatistic() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCarDrDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCarDrStatistic() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtEBStatistic() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEBStatement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCSDGV1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCSDGV5() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCSDGV2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCSDGV3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCSDGV4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPayment1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPayment2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPayment3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtScheduling() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtSPicking() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtSPicking1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtDispatching() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_KS_Z_StockApply_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_KS_Z_Welfare() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_KS_A_EC_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_KS_A_ECOrder_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_加工原料肉領料單() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_冷藏貨庫存表() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReportDataSet = New ReportDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtThroughputRowChangeEventHandler(ByVal sender As Object, ByVal e As dtThroughputRowChangeEvent)
    
    Public Delegate Sub dtMeltsRowChangeEventHandler(ByVal sender As Object, ByVal e As dtMeltsRowChangeEvent)
    
    Public Delegate Sub dtTransportRowChangeEventHandler(ByVal sender As Object, ByVal e As dtTransportRowChangeEvent)
    
    Public Delegate Sub dtFeedingRowChangeEventHandler(ByVal sender As Object, ByVal e As dtFeedingRowChangeEvent)
    
    Public Delegate Sub dtOutDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As dtOutDetailRowChangeEvent)
    
    Public Delegate Sub dtOutStatisticRowChangeEventHandler(ByVal sender As Object, ByVal e As dtOutStatisticRowChangeEvent)
    
    Public Delegate Sub dtInDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As dtInDetailRowChangeEvent)
    
    Public Delegate Sub dtInStatisticRowChangeEventHandler(ByVal sender As Object, ByVal e As dtInStatisticRowChangeEvent)
    
    Public Delegate Sub dtAdjustDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As dtAdjustDetailRowChangeEvent)
    
    Public Delegate Sub dtAdjustStatisticRowChangeEventHandler(ByVal sender As Object, ByVal e As dtAdjustStatisticRowChangeEvent)
    
    Public Delegate Sub dtCarDrDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As dtCarDrDetailRowChangeEvent)
    
    Public Delegate Sub dtCarDrStatisticRowChangeEventHandler(ByVal sender As Object, ByVal e As dtCarDrStatisticRowChangeEvent)
    
    Public Delegate Sub dtEBStatisticRowChangeEventHandler(ByVal sender As Object, ByVal e As dtEBStatisticRowChangeEvent)
    
    Public Delegate Sub EBStatementRowChangeEventHandler(ByVal sender As Object, ByVal e As EBStatementRowChangeEvent)
    
    Public Delegate Sub dtCSDGV1RowChangeEventHandler(ByVal sender As Object, ByVal e As dtCSDGV1RowChangeEvent)
    
    Public Delegate Sub dtCSDGV5RowChangeEventHandler(ByVal sender As Object, ByVal e As dtCSDGV5RowChangeEvent)
    
    Public Delegate Sub dtCSDGV2RowChangeEventHandler(ByVal sender As Object, ByVal e As dtCSDGV2RowChangeEvent)
    
    Public Delegate Sub dtCSDGV3RowChangeEventHandler(ByVal sender As Object, ByVal e As dtCSDGV3RowChangeEvent)
    
    Public Delegate Sub dtCSDGV4RowChangeEventHandler(ByVal sender As Object, ByVal e As dtCSDGV4RowChangeEvent)
    
    Public Delegate Sub dtPayment1RowChangeEventHandler(ByVal sender As Object, ByVal e As dtPayment1RowChangeEvent)
    
    Public Delegate Sub dtPayment2RowChangeEventHandler(ByVal sender As Object, ByVal e As dtPayment2RowChangeEvent)
    
    Public Delegate Sub dtPayment3RowChangeEventHandler(ByVal sender As Object, ByVal e As dtPayment3RowChangeEvent)
    
    Public Delegate Sub dtSchedulingRowChangeEventHandler(ByVal sender As Object, ByVal e As dtSchedulingRowChangeEvent)
    
    Public Delegate Sub dtSPickingRowChangeEventHandler(ByVal sender As Object, ByVal e As dtSPickingRowChangeEvent)
    
    Public Delegate Sub dtSPicking1RowChangeEventHandler(ByVal sender As Object, ByVal e As dtSPicking1RowChangeEvent)
    
    Public Delegate Sub dtDispatchingRowChangeEventHandler(ByVal sender As Object, ByVal e As dtDispatchingRowChangeEvent)
    
    Public Delegate Sub dt_KS_Z_StockApply_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_KS_Z_StockApply_DetailRowChangeEvent)
    
    Public Delegate Sub dt_KS_Z_WelfareRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_KS_Z_WelfareRowChangeEvent)
    
    Public Delegate Sub dt_KS_A_EC_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_KS_A_EC_DetailRowChangeEvent)
    
    Public Delegate Sub dt_KS_A_ECOrder_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_KS_A_ECOrder_DetailRowChangeEvent)
    
    Public Delegate Sub dt_加工原料肉領料單RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_加工原料肉領料單RowChangeEvent)
    
    Public Delegate Sub dt_冷藏貨庫存表RowChangeEventHandler(ByVal sender As Object, ByVal e As dt_冷藏貨庫存表RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtThroughputDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtThroughputRow)
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnFI118 As Global.System.Data.DataColumn
        
        Private columnU_M07 As Global.System.Data.DataColumn
        
        Private columnSalPackUn As Global.System.Data.DataColumn
        
        Private columnFI123 As Global.System.Data.DataColumn
        
        Private columnU_M02 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtThroughput"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FI118Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFI118
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_M07Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_M07
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalPackUnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalPackUn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FI123Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFI123
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_M02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_M02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtThroughputRow
            Get
                Return CType(Me.Rows(index),dtThroughputRow)
            End Get
        End Property
        
        Public Event dtThroughputRowChanging As dtThroughputRowChangeEventHandler
        
        Public Event dtThroughputRowChanged As dtThroughputRowChangeEventHandler
        
        Public Event dtThroughputRowDeleting As dtThroughputRowChangeEventHandler
        
        Public Event dtThroughputRowDeleted As dtThroughputRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtThroughputRow(ByVal row As dtThroughputRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtThroughputRow(ByVal ItemCode As String, ByVal ItemName As String, ByVal FI118 As String, ByVal U_M07 As String, ByVal SalPackUn As String, ByVal FI123 As String, ByVal U_M02 As String) As dtThroughputRow
            Dim rowdtThroughputRow As dtThroughputRow = CType(Me.NewRow,dtThroughputRow)
            Dim columnValuesArray() As Object = New Object() {ItemCode, ItemName, FI118, U_M07, SalPackUn, FI123, U_M02}
            rowdtThroughputRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtThroughputRow)
            Return rowdtThroughputRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtThroughputDataTable = CType(MyBase.Clone,dtThroughputDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtThroughputDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnFI118 = MyBase.Columns("FI118")
            Me.columnU_M07 = MyBase.Columns("U_M07")
            Me.columnSalPackUn = MyBase.Columns("SalPackUn")
            Me.columnFI123 = MyBase.Columns("FI123")
            Me.columnU_M02 = MyBase.Columns("U_M02")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnFI118 = New Global.System.Data.DataColumn("FI118", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFI118)
            Me.columnU_M07 = New Global.System.Data.DataColumn("U_M07", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_M07)
            Me.columnSalPackUn = New Global.System.Data.DataColumn("SalPackUn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalPackUn)
            Me.columnFI123 = New Global.System.Data.DataColumn("FI123", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFI123)
            Me.columnU_M02 = New Global.System.Data.DataColumn("U_M02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_M02)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtThroughputRow() As dtThroughputRow
            Return CType(Me.NewRow,dtThroughputRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtThroughputRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtThroughputRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtThroughputRowChangedEvent) Is Nothing) Then
                RaiseEvent dtThroughputRowChanged(Me, New dtThroughputRowChangeEvent(CType(e.Row,dtThroughputRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtThroughputRowChangingEvent) Is Nothing) Then
                RaiseEvent dtThroughputRowChanging(Me, New dtThroughputRowChangeEvent(CType(e.Row,dtThroughputRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtThroughputRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtThroughputRowDeleted(Me, New dtThroughputRowChangeEvent(CType(e.Row,dtThroughputRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtThroughputRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtThroughputRowDeleting(Me, New dtThroughputRowChangeEvent(CType(e.Row,dtThroughputRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtThroughputRow(ByVal row As dtThroughputRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtThroughputDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtMeltsDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtMeltsRow)
        
        Private column製造單號 As Global.System.Data.DataColumn
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column存貨編號 As Global.System.Data.DataColumn
        
        Private column品名規格 As Global.System.Data.DataColumn
        
        Private column單位 As Global.System.Data.DataColumn
        
        Private column產出合計 As Global.System.Data.DataColumn
        
        Private column入料合計 As Global.System.Data.DataColumn
        
        Private column製成率 As Global.System.Data.DataColumn
        
        Private column工時數 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtMelts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製造單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製造單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存貨編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存貨編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名規格Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名規格
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單位Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單位
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 產出合計Column() As Global.System.Data.DataColumn
            Get
                Return Me.column產出合計
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 入料合計Column() As Global.System.Data.DataColumn
            Get
                Return Me.column入料合計
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製成率Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製成率
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 工時數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column工時數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtMeltsRow
            Get
                Return CType(Me.Rows(index),dtMeltsRow)
            End Get
        End Property
        
        Public Event dtMeltsRowChanging As dtMeltsRowChangeEventHandler
        
        Public Event dtMeltsRowChanged As dtMeltsRowChangeEventHandler
        
        Public Event dtMeltsRowDeleting As dtMeltsRowChangeEventHandler
        
        Public Event dtMeltsRowDeleted As dtMeltsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtMeltsRow(ByVal row As dtMeltsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtMeltsRow(ByVal 製造單號 As String, ByVal 日期 As String, ByVal 存貨編號 As String, ByVal 品名規格 As String, ByVal 單位 As String, ByVal 產出合計 As String, ByVal 入料合計 As String, ByVal 製成率 As String, ByVal 工時數 As String) As dtMeltsRow
            Dim rowdtMeltsRow As dtMeltsRow = CType(Me.NewRow,dtMeltsRow)
            Dim columnValuesArray() As Object = New Object() {製造單號, 日期, 存貨編號, 品名規格, 單位, 產出合計, 入料合計, 製成率, 工時數}
            rowdtMeltsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtMeltsRow)
            Return rowdtMeltsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtMeltsDataTable = CType(MyBase.Clone,dtMeltsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtMeltsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column製造單號 = MyBase.Columns("製造單號")
            Me.column日期 = MyBase.Columns("日期")
            Me.column存貨編號 = MyBase.Columns("存貨編號")
            Me.column品名規格 = MyBase.Columns("品名規格")
            Me.column單位 = MyBase.Columns("單位")
            Me.column產出合計 = MyBase.Columns("產出合計")
            Me.column入料合計 = MyBase.Columns("入料合計")
            Me.column製成率 = MyBase.Columns("製成率")
            Me.column工時數 = MyBase.Columns("工時數")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column製造單號 = New Global.System.Data.DataColumn("製造單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製造單號)
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column存貨編號 = New Global.System.Data.DataColumn("存貨編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存貨編號)
            Me.column品名規格 = New Global.System.Data.DataColumn("品名規格", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名規格)
            Me.column單位 = New Global.System.Data.DataColumn("單位", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單位)
            Me.column產出合計 = New Global.System.Data.DataColumn("產出合計", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column產出合計)
            Me.column入料合計 = New Global.System.Data.DataColumn("入料合計", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column入料合計)
            Me.column製成率 = New Global.System.Data.DataColumn("製成率", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製成率)
            Me.column工時數 = New Global.System.Data.DataColumn("工時數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column工時數)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtMeltsRow() As dtMeltsRow
            Return CType(Me.NewRow,dtMeltsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtMeltsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtMeltsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtMeltsRowChangedEvent) Is Nothing) Then
                RaiseEvent dtMeltsRowChanged(Me, New dtMeltsRowChangeEvent(CType(e.Row,dtMeltsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtMeltsRowChangingEvent) Is Nothing) Then
                RaiseEvent dtMeltsRowChanging(Me, New dtMeltsRowChangeEvent(CType(e.Row,dtMeltsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtMeltsRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtMeltsRowDeleted(Me, New dtMeltsRowChangeEvent(CType(e.Row,dtMeltsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtMeltsRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtMeltsRowDeleting(Me, New dtMeltsRowChangeEvent(CType(e.Row,dtMeltsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtMeltsRow(ByVal row As dtMeltsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtMeltsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtTransportDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtTransportRow)
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column順序 As Global.System.Data.DataColumn
        
        Private column牧場名稱 As Global.System.Data.DataColumn
        
        Private column牧場代號 As Global.System.Data.DataColumn
        
        Private column實際平均重 As Global.System.Data.DataColumn
        
        Private column平均重 As Global.System.Data.DataColumn
        
        Private column來源 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column預抓羽數 As Global.System.Data.DataColumn
        
        Private column磅單羽數 As Global.System.Data.DataColumn
        
        Private column包裝數 As Global.System.Data.DataColumn
        
        Private column死亡數 As Global.System.Data.DataColumn
        
        Private column廢棄數 As Global.System.Data.DataColumn
        
        Private column製造單號 As Global.System.Data.DataColumn
        
        Private column車牌號 As Global.System.Data.DataColumn
        
        Private column公司會磅 As Global.System.Data.DataColumn
        
        Private column磅單重 As Global.System.Data.DataColumn
        
        Private column磅差 As Global.System.Data.DataColumn
        
        Private column備註 As Global.System.Data.DataColumn
        
        Private column特殊 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtTransport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 順序Column() As Global.System.Data.DataColumn
            Get
                Return Me.column順序
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 牧場名稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column牧場名稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 牧場代號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column牧場代號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 實際平均重Column() As Global.System.Data.DataColumn
            Get
                Return Me.column實際平均重
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 平均重Column() As Global.System.Data.DataColumn
            Get
                Return Me.column平均重
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 來源Column() As Global.System.Data.DataColumn
            Get
                Return Me.column來源
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 預抓羽數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column預抓羽數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 磅單羽數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column磅單羽數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 包裝數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column包裝數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 死亡數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column死亡數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 廢棄數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column廢棄數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製造單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製造單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 車牌號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column車牌號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 公司會磅Column() As Global.System.Data.DataColumn
            Get
                Return Me.column公司會磅
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 磅單重Column() As Global.System.Data.DataColumn
            Get
                Return Me.column磅單重
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 磅差Column() As Global.System.Data.DataColumn
            Get
                Return Me.column磅差
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 備註Column() As Global.System.Data.DataColumn
            Get
                Return Me.column備註
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 特殊Column() As Global.System.Data.DataColumn
            Get
                Return Me.column特殊
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtTransportRow
            Get
                Return CType(Me.Rows(index),dtTransportRow)
            End Get
        End Property
        
        Public Event dtTransportRowChanging As dtTransportRowChangeEventHandler
        
        Public Event dtTransportRowChanged As dtTransportRowChangeEventHandler
        
        Public Event dtTransportRowDeleting As dtTransportRowChangeEventHandler
        
        Public Event dtTransportRowDeleted As dtTransportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtTransportRow(ByVal row As dtTransportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtTransportRow( _
                    ByVal 日期 As String,  _
                    ByVal 順序 As String,  _
                    ByVal 牧場名稱 As String,  _
                    ByVal 牧場代號 As String,  _
                    ByVal 實際平均重 As String,  _
                    ByVal 平均重 As String,  _
                    ByVal 來源 As String,  _
                    ByVal 品名 As String,  _
                    ByVal 預抓羽數 As String,  _
                    ByVal 磅單羽數 As String,  _
                    ByVal 包裝數 As String,  _
                    ByVal 死亡數 As String,  _
                    ByVal 廢棄數 As String,  _
                    ByVal 製造單號 As String,  _
                    ByVal 車牌號 As String,  _
                    ByVal 公司會磅 As String,  _
                    ByVal 磅單重 As String,  _
                    ByVal 磅差 As String,  _
                    ByVal 備註 As String,  _
                    ByVal 特殊 As String) As dtTransportRow
            Dim rowdtTransportRow As dtTransportRow = CType(Me.NewRow,dtTransportRow)
            Dim columnValuesArray() As Object = New Object() {日期, 順序, 牧場名稱, 牧場代號, 實際平均重, 平均重, 來源, 品名, 預抓羽數, 磅單羽數, 包裝數, 死亡數, 廢棄數, 製造單號, 車牌號, 公司會磅, 磅單重, 磅差, 備註, 特殊}
            rowdtTransportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtTransportRow)
            Return rowdtTransportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtTransportDataTable = CType(MyBase.Clone,dtTransportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtTransportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column日期 = MyBase.Columns("日期")
            Me.column順序 = MyBase.Columns("順序")
            Me.column牧場名稱 = MyBase.Columns("牧場名稱")
            Me.column牧場代號 = MyBase.Columns("牧場代號")
            Me.column實際平均重 = MyBase.Columns("實際平均重")
            Me.column平均重 = MyBase.Columns("平均重")
            Me.column來源 = MyBase.Columns("來源")
            Me.column品名 = MyBase.Columns("品名")
            Me.column預抓羽數 = MyBase.Columns("預抓羽數")
            Me.column磅單羽數 = MyBase.Columns("磅單羽數")
            Me.column包裝數 = MyBase.Columns("包裝數")
            Me.column死亡數 = MyBase.Columns("死亡數")
            Me.column廢棄數 = MyBase.Columns("廢棄數")
            Me.column製造單號 = MyBase.Columns("製造單號")
            Me.column車牌號 = MyBase.Columns("車牌號")
            Me.column公司會磅 = MyBase.Columns("公司會磅")
            Me.column磅單重 = MyBase.Columns("磅單重")
            Me.column磅差 = MyBase.Columns("磅差")
            Me.column備註 = MyBase.Columns("備註")
            Me.column特殊 = MyBase.Columns("特殊")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column順序 = New Global.System.Data.DataColumn("順序", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column順序)
            Me.column牧場名稱 = New Global.System.Data.DataColumn("牧場名稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column牧場名稱)
            Me.column牧場代號 = New Global.System.Data.DataColumn("牧場代號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column牧場代號)
            Me.column實際平均重 = New Global.System.Data.DataColumn("實際平均重", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column實際平均重)
            Me.column平均重 = New Global.System.Data.DataColumn("平均重", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column平均重)
            Me.column來源 = New Global.System.Data.DataColumn("來源", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column來源)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column預抓羽數 = New Global.System.Data.DataColumn("預抓羽數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column預抓羽數)
            Me.column磅單羽數 = New Global.System.Data.DataColumn("磅單羽數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column磅單羽數)
            Me.column包裝數 = New Global.System.Data.DataColumn("包裝數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column包裝數)
            Me.column死亡數 = New Global.System.Data.DataColumn("死亡數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column死亡數)
            Me.column廢棄數 = New Global.System.Data.DataColumn("廢棄數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column廢棄數)
            Me.column製造單號 = New Global.System.Data.DataColumn("製造單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製造單號)
            Me.column車牌號 = New Global.System.Data.DataColumn("車牌號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column車牌號)
            Me.column公司會磅 = New Global.System.Data.DataColumn("公司會磅", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column公司會磅)
            Me.column磅單重 = New Global.System.Data.DataColumn("磅單重", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column磅單重)
            Me.column磅差 = New Global.System.Data.DataColumn("磅差", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column磅差)
            Me.column備註 = New Global.System.Data.DataColumn("備註", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column備註)
            Me.column特殊 = New Global.System.Data.DataColumn("特殊", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column特殊)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtTransportRow() As dtTransportRow
            Return CType(Me.NewRow,dtTransportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtTransportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtTransportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtTransportRowChangedEvent) Is Nothing) Then
                RaiseEvent dtTransportRowChanged(Me, New dtTransportRowChangeEvent(CType(e.Row,dtTransportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtTransportRowChangingEvent) Is Nothing) Then
                RaiseEvent dtTransportRowChanging(Me, New dtTransportRowChangeEvent(CType(e.Row,dtTransportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtTransportRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtTransportRowDeleted(Me, New dtTransportRowChangeEvent(CType(e.Row,dtTransportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtTransportRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtTransportRowDeleting(Me, New dtTransportRowChangeEvent(CType(e.Row,dtTransportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtTransportRow(ByVal row As dtTransportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtTransportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtFeedingDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtFeedingRow)
        
        Private column製造單號 As Global.System.Data.DataColumn
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column存貨編號 As Global.System.Data.DataColumn
        
        Private column品名規格 As Global.System.Data.DataColumn
        
        Private column單位 As Global.System.Data.DataColumn
        
        Private column預產數 As Global.System.Data.DataColumn
        
        Private column產出數 As Global.System.Data.DataColumn
        
        Private column製成率 As Global.System.Data.DataColumn
        
        Private column工時數 As Global.System.Data.DataColumn
        
        Private column領料數 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtFeeding"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製造單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製造單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存貨編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存貨編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名規格Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名規格
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單位Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單位
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 預產數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column預產數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 產出數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column產出數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製成率Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製成率
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 工時數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column工時數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 領料數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column領料數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtFeedingRow
            Get
                Return CType(Me.Rows(index),dtFeedingRow)
            End Get
        End Property
        
        Public Event dtFeedingRowChanging As dtFeedingRowChangeEventHandler
        
        Public Event dtFeedingRowChanged As dtFeedingRowChangeEventHandler
        
        Public Event dtFeedingRowDeleting As dtFeedingRowChangeEventHandler
        
        Public Event dtFeedingRowDeleted As dtFeedingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtFeedingRow(ByVal row As dtFeedingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtFeedingRow(ByVal 製造單號 As String, ByVal 日期 As String, ByVal 存貨編號 As String, ByVal 品名規格 As String, ByVal 單位 As String, ByVal 預產數 As String, ByVal 產出數 As String, ByVal 製成率 As String, ByVal 工時數 As String, ByVal 領料數 As String) As dtFeedingRow
            Dim rowdtFeedingRow As dtFeedingRow = CType(Me.NewRow,dtFeedingRow)
            Dim columnValuesArray() As Object = New Object() {製造單號, 日期, 存貨編號, 品名規格, 單位, 預產數, 產出數, 製成率, 工時數, 領料數}
            rowdtFeedingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtFeedingRow)
            Return rowdtFeedingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtFeedingDataTable = CType(MyBase.Clone,dtFeedingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtFeedingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column製造單號 = MyBase.Columns("製造單號")
            Me.column日期 = MyBase.Columns("日期")
            Me.column存貨編號 = MyBase.Columns("存貨編號")
            Me.column品名規格 = MyBase.Columns("品名規格")
            Me.column單位 = MyBase.Columns("單位")
            Me.column預產數 = MyBase.Columns("預產數")
            Me.column產出數 = MyBase.Columns("產出數")
            Me.column製成率 = MyBase.Columns("製成率")
            Me.column工時數 = MyBase.Columns("工時數")
            Me.column領料數 = MyBase.Columns("領料數")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column製造單號 = New Global.System.Data.DataColumn("製造單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製造單號)
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column存貨編號 = New Global.System.Data.DataColumn("存貨編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存貨編號)
            Me.column品名規格 = New Global.System.Data.DataColumn("品名規格", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名規格)
            Me.column單位 = New Global.System.Data.DataColumn("單位", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單位)
            Me.column預產數 = New Global.System.Data.DataColumn("預產數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column預產數)
            Me.column產出數 = New Global.System.Data.DataColumn("產出數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column產出數)
            Me.column製成率 = New Global.System.Data.DataColumn("製成率", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製成率)
            Me.column工時數 = New Global.System.Data.DataColumn("工時數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column工時數)
            Me.column領料數 = New Global.System.Data.DataColumn("領料數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column領料數)
            Me.column預產數.Caption = "產出合計"
            Me.column產出數.Caption = "入料合計"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtFeedingRow() As dtFeedingRow
            Return CType(Me.NewRow,dtFeedingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtFeedingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtFeedingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtFeedingRowChangedEvent) Is Nothing) Then
                RaiseEvent dtFeedingRowChanged(Me, New dtFeedingRowChangeEvent(CType(e.Row,dtFeedingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtFeedingRowChangingEvent) Is Nothing) Then
                RaiseEvent dtFeedingRowChanging(Me, New dtFeedingRowChangeEvent(CType(e.Row,dtFeedingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtFeedingRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtFeedingRowDeleted(Me, New dtFeedingRowChangeEvent(CType(e.Row,dtFeedingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtFeedingRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtFeedingRowDeleting(Me, New dtFeedingRowChangeEvent(CType(e.Row,dtFeedingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtFeedingRow(ByVal row As dtFeedingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtFeedingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtOutDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtOutDetailRow)
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column單號 As Global.System.Data.DataColumn
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column司機 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtOutDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 司機Column() As Global.System.Data.DataColumn
            Get
                Return Me.column司機
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtOutDetailRow
            Get
                Return CType(Me.Rows(index),dtOutDetailRow)
            End Get
        End Property
        
        Public Event dtOutDetailRowChanging As dtOutDetailRowChangeEventHandler
        
        Public Event dtOutDetailRowChanged As dtOutDetailRowChangeEventHandler
        
        Public Event dtOutDetailRowDeleting As dtOutDetailRowChangeEventHandler
        
        Public Event dtOutDetailRowDeleted As dtOutDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtOutDetailRow(ByVal row As dtOutDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtOutDetailRow(ByVal 日期 As String, ByVal 單號 As String, ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 司機 As String, ByVal 數量 As String) As dtOutDetailRow
            Dim rowdtOutDetailRow As dtOutDetailRow = CType(Me.NewRow,dtOutDetailRow)
            Dim columnValuesArray() As Object = New Object() {日期, 單號, 客戶編號, 客戶簡稱, 司機, 數量}
            rowdtOutDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtOutDetailRow)
            Return rowdtOutDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtOutDetailDataTable = CType(MyBase.Clone,dtOutDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtOutDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column日期 = MyBase.Columns("日期")
            Me.column單號 = MyBase.Columns("單號")
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column司機 = MyBase.Columns("司機")
            Me.column數量 = MyBase.Columns("數量")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column單號 = New Global.System.Data.DataColumn("單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單號)
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column司機 = New Global.System.Data.DataColumn("司機", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column司機)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtOutDetailRow() As dtOutDetailRow
            Return CType(Me.NewRow,dtOutDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtOutDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtOutDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtOutDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent dtOutDetailRowChanged(Me, New dtOutDetailRowChangeEvent(CType(e.Row,dtOutDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtOutDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent dtOutDetailRowChanging(Me, New dtOutDetailRowChangeEvent(CType(e.Row,dtOutDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtOutDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtOutDetailRowDeleted(Me, New dtOutDetailRowChangeEvent(CType(e.Row,dtOutDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtOutDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtOutDetailRowDeleting(Me, New dtOutDetailRowChangeEvent(CType(e.Row,dtOutDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtOutDetailRow(ByVal row As dtOutDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtOutDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtOutStatisticDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtOutStatisticRow)
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column發出數量 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtOutStatistic"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 發出數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column發出數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtOutStatisticRow
            Get
                Return CType(Me.Rows(index),dtOutStatisticRow)
            End Get
        End Property
        
        Public Event dtOutStatisticRowChanging As dtOutStatisticRowChangeEventHandler
        
        Public Event dtOutStatisticRowChanged As dtOutStatisticRowChangeEventHandler
        
        Public Event dtOutStatisticRowDeleting As dtOutStatisticRowChangeEventHandler
        
        Public Event dtOutStatisticRowDeleted As dtOutStatisticRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtOutStatisticRow(ByVal row As dtOutStatisticRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtOutStatisticRow(ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 發出數量 As String) As dtOutStatisticRow
            Dim rowdtOutStatisticRow As dtOutStatisticRow = CType(Me.NewRow,dtOutStatisticRow)
            Dim columnValuesArray() As Object = New Object() {客戶編號, 客戶簡稱, 發出數量}
            rowdtOutStatisticRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtOutStatisticRow)
            Return rowdtOutStatisticRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtOutStatisticDataTable = CType(MyBase.Clone,dtOutStatisticDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtOutStatisticDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column發出數量 = MyBase.Columns("發出數量")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column發出數量 = New Global.System.Data.DataColumn("發出數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column發出數量)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtOutStatisticRow() As dtOutStatisticRow
            Return CType(Me.NewRow,dtOutStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtOutStatisticRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtOutStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtOutStatisticRowChangedEvent) Is Nothing) Then
                RaiseEvent dtOutStatisticRowChanged(Me, New dtOutStatisticRowChangeEvent(CType(e.Row,dtOutStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtOutStatisticRowChangingEvent) Is Nothing) Then
                RaiseEvent dtOutStatisticRowChanging(Me, New dtOutStatisticRowChangeEvent(CType(e.Row,dtOutStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtOutStatisticRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtOutStatisticRowDeleted(Me, New dtOutStatisticRowChangeEvent(CType(e.Row,dtOutStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtOutStatisticRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtOutStatisticRowDeleting(Me, New dtOutStatisticRowChangeEvent(CType(e.Row,dtOutStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtOutStatisticRow(ByVal row As dtOutStatisticRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtOutStatisticDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtInDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtInDetailRow)
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column單號 As Global.System.Data.DataColumn
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column司機 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column特殊獎金 As Global.System.Data.DataColumn
        
        Private column說明 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtInDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 司機Column() As Global.System.Data.DataColumn
            Get
                Return Me.column司機
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 特殊獎金Column() As Global.System.Data.DataColumn
            Get
                Return Me.column特殊獎金
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 說明Column() As Global.System.Data.DataColumn
            Get
                Return Me.column說明
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtInDetailRow
            Get
                Return CType(Me.Rows(index),dtInDetailRow)
            End Get
        End Property
        
        Public Event dtInDetailRowChanging As dtInDetailRowChangeEventHandler
        
        Public Event dtInDetailRowChanged As dtInDetailRowChangeEventHandler
        
        Public Event dtInDetailRowDeleting As dtInDetailRowChangeEventHandler
        
        Public Event dtInDetailRowDeleted As dtInDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtInDetailRow(ByVal row As dtInDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtInDetailRow(ByVal 日期 As String, ByVal 單號 As String, ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 司機 As String, ByVal 數量 As String, ByVal 特殊獎金 As String, ByVal 說明 As String) As dtInDetailRow
            Dim rowdtInDetailRow As dtInDetailRow = CType(Me.NewRow,dtInDetailRow)
            Dim columnValuesArray() As Object = New Object() {日期, 單號, 客戶編號, 客戶簡稱, 司機, 數量, 特殊獎金, 說明}
            rowdtInDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtInDetailRow)
            Return rowdtInDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtInDetailDataTable = CType(MyBase.Clone,dtInDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtInDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column日期 = MyBase.Columns("日期")
            Me.column單號 = MyBase.Columns("單號")
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column司機 = MyBase.Columns("司機")
            Me.column數量 = MyBase.Columns("數量")
            Me.column特殊獎金 = MyBase.Columns("特殊獎金")
            Me.column說明 = MyBase.Columns("說明")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column單號 = New Global.System.Data.DataColumn("單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單號)
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column司機 = New Global.System.Data.DataColumn("司機", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column司機)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column特殊獎金 = New Global.System.Data.DataColumn("特殊獎金", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column特殊獎金)
            Me.column說明 = New Global.System.Data.DataColumn("說明", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column說明)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtInDetailRow() As dtInDetailRow
            Return CType(Me.NewRow,dtInDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtInDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtInDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtInDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent dtInDetailRowChanged(Me, New dtInDetailRowChangeEvent(CType(e.Row,dtInDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtInDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent dtInDetailRowChanging(Me, New dtInDetailRowChangeEvent(CType(e.Row,dtInDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtInDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtInDetailRowDeleted(Me, New dtInDetailRowChangeEvent(CType(e.Row,dtInDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtInDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtInDetailRowDeleting(Me, New dtInDetailRowChangeEvent(CType(e.Row,dtInDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtInDetailRow(ByVal row As dtInDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtInDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtInStatisticDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtInStatisticRow)
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column司機 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtInStatistic"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 司機Column() As Global.System.Data.DataColumn
            Get
                Return Me.column司機
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtInStatisticRow
            Get
                Return CType(Me.Rows(index),dtInStatisticRow)
            End Get
        End Property
        
        Public Event dtInStatisticRowChanging As dtInStatisticRowChangeEventHandler
        
        Public Event dtInStatisticRowChanged As dtInStatisticRowChangeEventHandler
        
        Public Event dtInStatisticRowDeleting As dtInStatisticRowChangeEventHandler
        
        Public Event dtInStatisticRowDeleted As dtInStatisticRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtInStatisticRow(ByVal row As dtInStatisticRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtInStatisticRow(ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 司機 As String, ByVal 數量 As String) As dtInStatisticRow
            Dim rowdtInStatisticRow As dtInStatisticRow = CType(Me.NewRow,dtInStatisticRow)
            Dim columnValuesArray() As Object = New Object() {客戶編號, 客戶簡稱, 司機, 數量}
            rowdtInStatisticRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtInStatisticRow)
            Return rowdtInStatisticRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtInStatisticDataTable = CType(MyBase.Clone,dtInStatisticDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtInStatisticDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column司機 = MyBase.Columns("司機")
            Me.column數量 = MyBase.Columns("數量")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column司機 = New Global.System.Data.DataColumn("司機", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column司機)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtInStatisticRow() As dtInStatisticRow
            Return CType(Me.NewRow,dtInStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtInStatisticRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtInStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtInStatisticRowChangedEvent) Is Nothing) Then
                RaiseEvent dtInStatisticRowChanged(Me, New dtInStatisticRowChangeEvent(CType(e.Row,dtInStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtInStatisticRowChangingEvent) Is Nothing) Then
                RaiseEvent dtInStatisticRowChanging(Me, New dtInStatisticRowChangeEvent(CType(e.Row,dtInStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtInStatisticRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtInStatisticRowDeleted(Me, New dtInStatisticRowChangeEvent(CType(e.Row,dtInStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtInStatisticRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtInStatisticRowDeleting(Me, New dtInStatisticRowChangeEvent(CType(e.Row,dtInStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtInStatisticRow(ByVal row As dtInStatisticRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtInStatisticDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtAdjustDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtAdjustDetailRow)
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column單號 As Global.System.Data.DataColumn
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column增減 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column說明 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtAdjustDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 增減Column() As Global.System.Data.DataColumn
            Get
                Return Me.column增減
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 說明Column() As Global.System.Data.DataColumn
            Get
                Return Me.column說明
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtAdjustDetailRow
            Get
                Return CType(Me.Rows(index),dtAdjustDetailRow)
            End Get
        End Property
        
        Public Event dtAdjustDetailRowChanging As dtAdjustDetailRowChangeEventHandler
        
        Public Event dtAdjustDetailRowChanged As dtAdjustDetailRowChangeEventHandler
        
        Public Event dtAdjustDetailRowDeleting As dtAdjustDetailRowChangeEventHandler
        
        Public Event dtAdjustDetailRowDeleted As dtAdjustDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtAdjustDetailRow(ByVal row As dtAdjustDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtAdjustDetailRow(ByVal 日期 As String, ByVal 單號 As String, ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 增減 As String, ByVal 數量 As String, ByVal 說明 As String) As dtAdjustDetailRow
            Dim rowdtAdjustDetailRow As dtAdjustDetailRow = CType(Me.NewRow,dtAdjustDetailRow)
            Dim columnValuesArray() As Object = New Object() {日期, 單號, 客戶編號, 客戶簡稱, 增減, 數量, 說明}
            rowdtAdjustDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtAdjustDetailRow)
            Return rowdtAdjustDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtAdjustDetailDataTable = CType(MyBase.Clone,dtAdjustDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtAdjustDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column日期 = MyBase.Columns("日期")
            Me.column單號 = MyBase.Columns("單號")
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column增減 = MyBase.Columns("增減")
            Me.column數量 = MyBase.Columns("數量")
            Me.column說明 = MyBase.Columns("說明")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column單號 = New Global.System.Data.DataColumn("單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單號)
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column增減 = New Global.System.Data.DataColumn("增減", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column增減)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column說明 = New Global.System.Data.DataColumn("說明", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column說明)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtAdjustDetailRow() As dtAdjustDetailRow
            Return CType(Me.NewRow,dtAdjustDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtAdjustDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtAdjustDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtAdjustDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent dtAdjustDetailRowChanged(Me, New dtAdjustDetailRowChangeEvent(CType(e.Row,dtAdjustDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtAdjustDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent dtAdjustDetailRowChanging(Me, New dtAdjustDetailRowChangeEvent(CType(e.Row,dtAdjustDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtAdjustDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtAdjustDetailRowDeleted(Me, New dtAdjustDetailRowChangeEvent(CType(e.Row,dtAdjustDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtAdjustDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtAdjustDetailRowDeleting(Me, New dtAdjustDetailRowChangeEvent(CType(e.Row,dtAdjustDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtAdjustDetailRow(ByVal row As dtAdjustDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtAdjustDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtAdjustStatisticDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtAdjustStatisticRow)
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column增加 As Global.System.Data.DataColumn
        
        Private column減少 As Global.System.Data.DataColumn
        
        Private column調整合計 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtAdjustStatistic"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 增加Column() As Global.System.Data.DataColumn
            Get
                Return Me.column增加
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 減少Column() As Global.System.Data.DataColumn
            Get
                Return Me.column減少
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 調整合計Column() As Global.System.Data.DataColumn
            Get
                Return Me.column調整合計
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtAdjustStatisticRow
            Get
                Return CType(Me.Rows(index),dtAdjustStatisticRow)
            End Get
        End Property
        
        Public Event dtAdjustStatisticRowChanging As dtAdjustStatisticRowChangeEventHandler
        
        Public Event dtAdjustStatisticRowChanged As dtAdjustStatisticRowChangeEventHandler
        
        Public Event dtAdjustStatisticRowDeleting As dtAdjustStatisticRowChangeEventHandler
        
        Public Event dtAdjustStatisticRowDeleted As dtAdjustStatisticRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtAdjustStatisticRow(ByVal row As dtAdjustStatisticRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtAdjustStatisticRow(ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 增加 As String, ByVal 減少 As String, ByVal 調整合計 As String) As dtAdjustStatisticRow
            Dim rowdtAdjustStatisticRow As dtAdjustStatisticRow = CType(Me.NewRow,dtAdjustStatisticRow)
            Dim columnValuesArray() As Object = New Object() {客戶編號, 客戶簡稱, 增加, 減少, 調整合計}
            rowdtAdjustStatisticRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtAdjustStatisticRow)
            Return rowdtAdjustStatisticRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtAdjustStatisticDataTable = CType(MyBase.Clone,dtAdjustStatisticDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtAdjustStatisticDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column增加 = MyBase.Columns("增加")
            Me.column減少 = MyBase.Columns("減少")
            Me.column調整合計 = MyBase.Columns("調整合計")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column增加 = New Global.System.Data.DataColumn("增加", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column增加)
            Me.column減少 = New Global.System.Data.DataColumn("減少", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column減少)
            Me.column調整合計 = New Global.System.Data.DataColumn("調整合計", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column調整合計)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtAdjustStatisticRow() As dtAdjustStatisticRow
            Return CType(Me.NewRow,dtAdjustStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtAdjustStatisticRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtAdjustStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtAdjustStatisticRowChangedEvent) Is Nothing) Then
                RaiseEvent dtAdjustStatisticRowChanged(Me, New dtAdjustStatisticRowChangeEvent(CType(e.Row,dtAdjustStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtAdjustStatisticRowChangingEvent) Is Nothing) Then
                RaiseEvent dtAdjustStatisticRowChanging(Me, New dtAdjustStatisticRowChangeEvent(CType(e.Row,dtAdjustStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtAdjustStatisticRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtAdjustStatisticRowDeleted(Me, New dtAdjustStatisticRowChangeEvent(CType(e.Row,dtAdjustStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtAdjustStatisticRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtAdjustStatisticRowDeleting(Me, New dtAdjustStatisticRowChangeEvent(CType(e.Row,dtAdjustStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtAdjustStatisticRow(ByVal row As dtAdjustStatisticRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtAdjustStatisticDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCarDrDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtCarDrDetailRow)
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column單號 As Global.System.Data.DataColumn
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column司機 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column特殊獎金 As Global.System.Data.DataColumn
        
        Private column說明 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCarDrDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 司機Column() As Global.System.Data.DataColumn
            Get
                Return Me.column司機
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 特殊獎金Column() As Global.System.Data.DataColumn
            Get
                Return Me.column特殊獎金
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 說明Column() As Global.System.Data.DataColumn
            Get
                Return Me.column說明
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCarDrDetailRow
            Get
                Return CType(Me.Rows(index),dtCarDrDetailRow)
            End Get
        End Property
        
        Public Event dtCarDrDetailRowChanging As dtCarDrDetailRowChangeEventHandler
        
        Public Event dtCarDrDetailRowChanged As dtCarDrDetailRowChangeEventHandler
        
        Public Event dtCarDrDetailRowDeleting As dtCarDrDetailRowChangeEventHandler
        
        Public Event dtCarDrDetailRowDeleted As dtCarDrDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCarDrDetailRow(ByVal row As dtCarDrDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCarDrDetailRow(ByVal 日期 As String, ByVal 單號 As String, ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 司機 As String, ByVal 數量 As String, ByVal 特殊獎金 As String, ByVal 說明 As String) As dtCarDrDetailRow
            Dim rowdtCarDrDetailRow As dtCarDrDetailRow = CType(Me.NewRow,dtCarDrDetailRow)
            Dim columnValuesArray() As Object = New Object() {日期, 單號, 客戶編號, 客戶簡稱, 司機, 數量, 特殊獎金, 說明}
            rowdtCarDrDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCarDrDetailRow)
            Return rowdtCarDrDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCarDrDetailDataTable = CType(MyBase.Clone,dtCarDrDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCarDrDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column日期 = MyBase.Columns("日期")
            Me.column單號 = MyBase.Columns("單號")
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column司機 = MyBase.Columns("司機")
            Me.column數量 = MyBase.Columns("數量")
            Me.column特殊獎金 = MyBase.Columns("特殊獎金")
            Me.column說明 = MyBase.Columns("說明")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column單號 = New Global.System.Data.DataColumn("單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單號)
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column司機 = New Global.System.Data.DataColumn("司機", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column司機)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column特殊獎金 = New Global.System.Data.DataColumn("特殊獎金", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column特殊獎金)
            Me.column說明 = New Global.System.Data.DataColumn("說明", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column說明)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCarDrDetailRow() As dtCarDrDetailRow
            Return CType(Me.NewRow,dtCarDrDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCarDrDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCarDrDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCarDrDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent dtCarDrDetailRowChanged(Me, New dtCarDrDetailRowChangeEvent(CType(e.Row,dtCarDrDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCarDrDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent dtCarDrDetailRowChanging(Me, New dtCarDrDetailRowChangeEvent(CType(e.Row,dtCarDrDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCarDrDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCarDrDetailRowDeleted(Me, New dtCarDrDetailRowChangeEvent(CType(e.Row,dtCarDrDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCarDrDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCarDrDetailRowDeleting(Me, New dtCarDrDetailRowChangeEvent(CType(e.Row,dtCarDrDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCarDrDetailRow(ByVal row As dtCarDrDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCarDrDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCarDrStatisticDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtCarDrStatisticRow)
        
        Private column司機 As Global.System.Data.DataColumn
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCarDrStatistic"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 司機Column() As Global.System.Data.DataColumn
            Get
                Return Me.column司機
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCarDrStatisticRow
            Get
                Return CType(Me.Rows(index),dtCarDrStatisticRow)
            End Get
        End Property
        
        Public Event dtCarDrStatisticRowChanging As dtCarDrStatisticRowChangeEventHandler
        
        Public Event dtCarDrStatisticRowChanged As dtCarDrStatisticRowChangeEventHandler
        
        Public Event dtCarDrStatisticRowDeleting As dtCarDrStatisticRowChangeEventHandler
        
        Public Event dtCarDrStatisticRowDeleted As dtCarDrStatisticRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCarDrStatisticRow(ByVal row As dtCarDrStatisticRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCarDrStatisticRow(ByVal 司機 As String, ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 數量 As String) As dtCarDrStatisticRow
            Dim rowdtCarDrStatisticRow As dtCarDrStatisticRow = CType(Me.NewRow,dtCarDrStatisticRow)
            Dim columnValuesArray() As Object = New Object() {司機, 客戶編號, 客戶簡稱, 數量}
            rowdtCarDrStatisticRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCarDrStatisticRow)
            Return rowdtCarDrStatisticRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCarDrStatisticDataTable = CType(MyBase.Clone,dtCarDrStatisticDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCarDrStatisticDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column司機 = MyBase.Columns("司機")
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column數量 = MyBase.Columns("數量")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column司機 = New Global.System.Data.DataColumn("司機", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column司機)
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCarDrStatisticRow() As dtCarDrStatisticRow
            Return CType(Me.NewRow,dtCarDrStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCarDrStatisticRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCarDrStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCarDrStatisticRowChangedEvent) Is Nothing) Then
                RaiseEvent dtCarDrStatisticRowChanged(Me, New dtCarDrStatisticRowChangeEvent(CType(e.Row,dtCarDrStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCarDrStatisticRowChangingEvent) Is Nothing) Then
                RaiseEvent dtCarDrStatisticRowChanging(Me, New dtCarDrStatisticRowChangeEvent(CType(e.Row,dtCarDrStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCarDrStatisticRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCarDrStatisticRowDeleted(Me, New dtCarDrStatisticRowChangeEvent(CType(e.Row,dtCarDrStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCarDrStatisticRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCarDrStatisticRowDeleting(Me, New dtCarDrStatisticRowChangeEvent(CType(e.Row,dtCarDrStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCarDrStatisticRow(ByVal row As dtCarDrStatisticRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCarDrStatisticDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtEBStatisticDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtEBStatisticRow)
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column期初數量 As Global.System.Data.DataColumn
        
        Private column發出數量 As Global.System.Data.DataColumn
        
        Private column回收數量 As Global.System.Data.DataColumn
        
        Private column調加數量 As Global.System.Data.DataColumn
        
        Private column調減數量 As Global.System.Data.DataColumn
        
        Private column餘數 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtEBStatistic"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 期初數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column期初數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 發出數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column發出數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 回收數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column回收數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 調加數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column調加數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 調減數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column調減數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 餘數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column餘數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtEBStatisticRow
            Get
                Return CType(Me.Rows(index),dtEBStatisticRow)
            End Get
        End Property
        
        Public Event dtEBStatisticRowChanging As dtEBStatisticRowChangeEventHandler
        
        Public Event dtEBStatisticRowChanged As dtEBStatisticRowChangeEventHandler
        
        Public Event dtEBStatisticRowDeleting As dtEBStatisticRowChangeEventHandler
        
        Public Event dtEBStatisticRowDeleted As dtEBStatisticRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtEBStatisticRow(ByVal row As dtEBStatisticRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtEBStatisticRow(ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 期初數量 As String, ByVal 發出數量 As String, ByVal 回收數量 As String, ByVal 調加數量 As String, ByVal 調減數量 As String, ByVal 餘數 As String) As dtEBStatisticRow
            Dim rowdtEBStatisticRow As dtEBStatisticRow = CType(Me.NewRow,dtEBStatisticRow)
            Dim columnValuesArray() As Object = New Object() {客戶編號, 客戶簡稱, 期初數量, 發出數量, 回收數量, 調加數量, 調減數量, 餘數}
            rowdtEBStatisticRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtEBStatisticRow)
            Return rowdtEBStatisticRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtEBStatisticDataTable = CType(MyBase.Clone,dtEBStatisticDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtEBStatisticDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column期初數量 = MyBase.Columns("期初數量")
            Me.column發出數量 = MyBase.Columns("發出數量")
            Me.column回收數量 = MyBase.Columns("回收數量")
            Me.column調加數量 = MyBase.Columns("調加數量")
            Me.column調減數量 = MyBase.Columns("調減數量")
            Me.column餘數 = MyBase.Columns("餘數")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column期初數量 = New Global.System.Data.DataColumn("期初數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column期初數量)
            Me.column發出數量 = New Global.System.Data.DataColumn("發出數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column發出數量)
            Me.column回收數量 = New Global.System.Data.DataColumn("回收數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column回收數量)
            Me.column調加數量 = New Global.System.Data.DataColumn("調加數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column調加數量)
            Me.column調減數量 = New Global.System.Data.DataColumn("調減數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column調減數量)
            Me.column餘數 = New Global.System.Data.DataColumn("餘數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column餘數)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtEBStatisticRow() As dtEBStatisticRow
            Return CType(Me.NewRow,dtEBStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtEBStatisticRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtEBStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtEBStatisticRowChangedEvent) Is Nothing) Then
                RaiseEvent dtEBStatisticRowChanged(Me, New dtEBStatisticRowChangeEvent(CType(e.Row,dtEBStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtEBStatisticRowChangingEvent) Is Nothing) Then
                RaiseEvent dtEBStatisticRowChanging(Me, New dtEBStatisticRowChangeEvent(CType(e.Row,dtEBStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtEBStatisticRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtEBStatisticRowDeleted(Me, New dtEBStatisticRowChangeEvent(CType(e.Row,dtEBStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtEBStatisticRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtEBStatisticRowDeleting(Me, New dtEBStatisticRowChangeEvent(CType(e.Row,dtEBStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtEBStatisticRow(ByVal row As dtEBStatisticRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtEBStatisticDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EBStatementDataTable
        Inherits Global.System.Data.TypedTableBase(Of EBStatementRow)
        
        Private column客戶編號 As Global.System.Data.DataColumn
        
        Private column客戶簡稱 As Global.System.Data.DataColumn
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column前期餘數 As Global.System.Data.DataColumn
        
        Private column發出數量 As Global.System.Data.DataColumn
        
        Private column回收數量 As Global.System.Data.DataColumn
        
        Private column調加數量 As Global.System.Data.DataColumn
        
        Private column調減數量 As Global.System.Data.DataColumn
        
        Private column本日餘數 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EBStatement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶簡稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶簡稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 前期餘數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column前期餘數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 發出數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column發出數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 回收數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column回收數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 調加數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column調加數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 調減數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column調減數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 本日餘數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column本日餘數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EBStatementRow
            Get
                Return CType(Me.Rows(index),EBStatementRow)
            End Get
        End Property
        
        Public Event EBStatementRowChanging As EBStatementRowChangeEventHandler
        
        Public Event EBStatementRowChanged As EBStatementRowChangeEventHandler
        
        Public Event EBStatementRowDeleting As EBStatementRowChangeEventHandler
        
        Public Event EBStatementRowDeleted As EBStatementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEBStatementRow(ByVal row As EBStatementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEBStatementRow(ByVal 客戶編號 As String, ByVal 客戶簡稱 As String, ByVal 日期 As String, ByVal 前期餘數 As String, ByVal 發出數量 As String, ByVal 回收數量 As String, ByVal 調加數量 As String, ByVal 調減數量 As String, ByVal 本日餘數 As String) As EBStatementRow
            Dim rowEBStatementRow As EBStatementRow = CType(Me.NewRow,EBStatementRow)
            Dim columnValuesArray() As Object = New Object() {客戶編號, 客戶簡稱, 日期, 前期餘數, 發出數量, 回收數量, 調加數量, 調減數量, 本日餘數}
            rowEBStatementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEBStatementRow)
            Return rowEBStatementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EBStatementDataTable = CType(MyBase.Clone,EBStatementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EBStatementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column客戶編號 = MyBase.Columns("客戶編號")
            Me.column客戶簡稱 = MyBase.Columns("客戶簡稱")
            Me.column日期 = MyBase.Columns("日期")
            Me.column前期餘數 = MyBase.Columns("前期餘數")
            Me.column發出數量 = MyBase.Columns("發出數量")
            Me.column回收數量 = MyBase.Columns("回收數量")
            Me.column調加數量 = MyBase.Columns("調加數量")
            Me.column調減數量 = MyBase.Columns("調減數量")
            Me.column本日餘數 = MyBase.Columns("本日餘數")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column客戶編號 = New Global.System.Data.DataColumn("客戶編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶編號)
            Me.column客戶簡稱 = New Global.System.Data.DataColumn("客戶簡稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶簡稱)
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column前期餘數 = New Global.System.Data.DataColumn("前期餘數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column前期餘數)
            Me.column發出數量 = New Global.System.Data.DataColumn("發出數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column發出數量)
            Me.column回收數量 = New Global.System.Data.DataColumn("回收數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column回收數量)
            Me.column調加數量 = New Global.System.Data.DataColumn("調加數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column調加數量)
            Me.column調減數量 = New Global.System.Data.DataColumn("調減數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column調減數量)
            Me.column本日餘數 = New Global.System.Data.DataColumn("本日餘數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column本日餘數)
            Me.column日期.Caption = "期初數量"
            Me.column調減數量.Caption = "餘數"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEBStatementRow() As EBStatementRow
            Return CType(Me.NewRow,EBStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EBStatementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EBStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EBStatementRowChangedEvent) Is Nothing) Then
                RaiseEvent EBStatementRowChanged(Me, New EBStatementRowChangeEvent(CType(e.Row,EBStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EBStatementRowChangingEvent) Is Nothing) Then
                RaiseEvent EBStatementRowChanging(Me, New EBStatementRowChangeEvent(CType(e.Row,EBStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EBStatementRowDeletedEvent) Is Nothing) Then
                RaiseEvent EBStatementRowDeleted(Me, New EBStatementRowChangeEvent(CType(e.Row,EBStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EBStatementRowDeletingEvent) Is Nothing) Then
                RaiseEvent EBStatementRowDeleting(Me, New EBStatementRowChangeEvent(CType(e.Row,EBStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEBStatementRow(ByVal row As EBStatementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EBStatementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCSDGV1DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtCSDGV1Row)
        
        Private column過帳日期 As Global.System.Data.DataColumn
        
        Private column代碼 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column單價 As Global.System.Data.DataColumn
        
        Private column金額 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCSDGV1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 過帳日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column過帳日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 代碼Column() As Global.System.Data.DataColumn
            Get
                Return Me.column代碼
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單價Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單價
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 金額Column() As Global.System.Data.DataColumn
            Get
                Return Me.column金額
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCSDGV1Row
            Get
                Return CType(Me.Rows(index),dtCSDGV1Row)
            End Get
        End Property
        
        Public Event dtCSDGV1RowChanging As dtCSDGV1RowChangeEventHandler
        
        Public Event dtCSDGV1RowChanged As dtCSDGV1RowChangeEventHandler
        
        Public Event dtCSDGV1RowDeleting As dtCSDGV1RowChangeEventHandler
        
        Public Event dtCSDGV1RowDeleted As dtCSDGV1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCSDGV1Row(ByVal row As dtCSDGV1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCSDGV1Row(ByVal 過帳日期 As String, ByVal 代碼 As String, ByVal 品名 As String, ByVal 數量 As String, ByVal 單價 As String, ByVal 金額 As String) As dtCSDGV1Row
            Dim rowdtCSDGV1Row As dtCSDGV1Row = CType(Me.NewRow,dtCSDGV1Row)
            Dim columnValuesArray() As Object = New Object() {過帳日期, 代碼, 品名, 數量, 單價, 金額}
            rowdtCSDGV1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCSDGV1Row)
            Return rowdtCSDGV1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCSDGV1DataTable = CType(MyBase.Clone,dtCSDGV1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCSDGV1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column過帳日期 = MyBase.Columns("過帳日期")
            Me.column代碼 = MyBase.Columns("代碼")
            Me.column品名 = MyBase.Columns("品名")
            Me.column數量 = MyBase.Columns("數量")
            Me.column單價 = MyBase.Columns("單價")
            Me.column金額 = MyBase.Columns("金額")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column過帳日期 = New Global.System.Data.DataColumn("過帳日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column過帳日期)
            Me.column代碼 = New Global.System.Data.DataColumn("代碼", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column代碼)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column單價 = New Global.System.Data.DataColumn("單價", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單價)
            Me.column金額 = New Global.System.Data.DataColumn("金額", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column金額)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCSDGV1Row() As dtCSDGV1Row
            Return CType(Me.NewRow,dtCSDGV1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCSDGV1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCSDGV1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCSDGV1RowChangedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV1RowChanged(Me, New dtCSDGV1RowChangeEvent(CType(e.Row,dtCSDGV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCSDGV1RowChangingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV1RowChanging(Me, New dtCSDGV1RowChangeEvent(CType(e.Row,dtCSDGV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCSDGV1RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV1RowDeleted(Me, New dtCSDGV1RowChangeEvent(CType(e.Row,dtCSDGV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCSDGV1RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV1RowDeleting(Me, New dtCSDGV1RowChangeEvent(CType(e.Row,dtCSDGV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCSDGV1Row(ByVal row As dtCSDGV1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCSDGV1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCSDGV5DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtCSDGV5Row)
        
        Private column過帳日期 As Global.System.Data.DataColumn
        
        Private column代碼 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column單價 As Global.System.Data.DataColumn
        
        Private column金額 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCSDGV5"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 過帳日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column過帳日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 代碼Column() As Global.System.Data.DataColumn
            Get
                Return Me.column代碼
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單價Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單價
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 金額Column() As Global.System.Data.DataColumn
            Get
                Return Me.column金額
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCSDGV5Row
            Get
                Return CType(Me.Rows(index),dtCSDGV5Row)
            End Get
        End Property
        
        Public Event dtCSDGV5RowChanging As dtCSDGV5RowChangeEventHandler
        
        Public Event dtCSDGV5RowChanged As dtCSDGV5RowChangeEventHandler
        
        Public Event dtCSDGV5RowDeleting As dtCSDGV5RowChangeEventHandler
        
        Public Event dtCSDGV5RowDeleted As dtCSDGV5RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCSDGV5Row(ByVal row As dtCSDGV5Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCSDGV5Row(ByVal 過帳日期 As String, ByVal 代碼 As String, ByVal 品名 As String, ByVal 數量 As String, ByVal 單價 As String, ByVal 金額 As String) As dtCSDGV5Row
            Dim rowdtCSDGV5Row As dtCSDGV5Row = CType(Me.NewRow,dtCSDGV5Row)
            Dim columnValuesArray() As Object = New Object() {過帳日期, 代碼, 品名, 數量, 單價, 金額}
            rowdtCSDGV5Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCSDGV5Row)
            Return rowdtCSDGV5Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCSDGV5DataTable = CType(MyBase.Clone,dtCSDGV5DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCSDGV5DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column過帳日期 = MyBase.Columns("過帳日期")
            Me.column代碼 = MyBase.Columns("代碼")
            Me.column品名 = MyBase.Columns("品名")
            Me.column數量 = MyBase.Columns("數量")
            Me.column單價 = MyBase.Columns("單價")
            Me.column金額 = MyBase.Columns("金額")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column過帳日期 = New Global.System.Data.DataColumn("過帳日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column過帳日期)
            Me.column代碼 = New Global.System.Data.DataColumn("代碼", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column代碼)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column單價 = New Global.System.Data.DataColumn("單價", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單價)
            Me.column金額 = New Global.System.Data.DataColumn("金額", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column金額)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCSDGV5Row() As dtCSDGV5Row
            Return CType(Me.NewRow,dtCSDGV5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCSDGV5Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCSDGV5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCSDGV5RowChangedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV5RowChanged(Me, New dtCSDGV5RowChangeEvent(CType(e.Row,dtCSDGV5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCSDGV5RowChangingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV5RowChanging(Me, New dtCSDGV5RowChangeEvent(CType(e.Row,dtCSDGV5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCSDGV5RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV5RowDeleted(Me, New dtCSDGV5RowChangeEvent(CType(e.Row,dtCSDGV5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCSDGV5RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV5RowDeleting(Me, New dtCSDGV5RowChangeEvent(CType(e.Row,dtCSDGV5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCSDGV5Row(ByVal row As dtCSDGV5Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCSDGV5DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCSDGV2DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtCSDGV2Row)
        
        Private column過帳日期 As Global.System.Data.DataColumn
        
        Private column代碼 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column單價 As Global.System.Data.DataColumn
        
        Private column金額 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCSDGV2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 過帳日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column過帳日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 代碼Column() As Global.System.Data.DataColumn
            Get
                Return Me.column代碼
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單價Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單價
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 金額Column() As Global.System.Data.DataColumn
            Get
                Return Me.column金額
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCSDGV2Row
            Get
                Return CType(Me.Rows(index),dtCSDGV2Row)
            End Get
        End Property
        
        Public Event dtCSDGV2RowChanging As dtCSDGV2RowChangeEventHandler
        
        Public Event dtCSDGV2RowChanged As dtCSDGV2RowChangeEventHandler
        
        Public Event dtCSDGV2RowDeleting As dtCSDGV2RowChangeEventHandler
        
        Public Event dtCSDGV2RowDeleted As dtCSDGV2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCSDGV2Row(ByVal row As dtCSDGV2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCSDGV2Row(ByVal 過帳日期 As String, ByVal 代碼 As String, ByVal 品名 As String, ByVal 數量 As String, ByVal 單價 As String, ByVal 金額 As String) As dtCSDGV2Row
            Dim rowdtCSDGV2Row As dtCSDGV2Row = CType(Me.NewRow,dtCSDGV2Row)
            Dim columnValuesArray() As Object = New Object() {過帳日期, 代碼, 品名, 數量, 單價, 金額}
            rowdtCSDGV2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCSDGV2Row)
            Return rowdtCSDGV2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCSDGV2DataTable = CType(MyBase.Clone,dtCSDGV2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCSDGV2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column過帳日期 = MyBase.Columns("過帳日期")
            Me.column代碼 = MyBase.Columns("代碼")
            Me.column品名 = MyBase.Columns("品名")
            Me.column數量 = MyBase.Columns("數量")
            Me.column單價 = MyBase.Columns("單價")
            Me.column金額 = MyBase.Columns("金額")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column過帳日期 = New Global.System.Data.DataColumn("過帳日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column過帳日期)
            Me.column代碼 = New Global.System.Data.DataColumn("代碼", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column代碼)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column單價 = New Global.System.Data.DataColumn("單價", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單價)
            Me.column金額 = New Global.System.Data.DataColumn("金額", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column金額)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCSDGV2Row() As dtCSDGV2Row
            Return CType(Me.NewRow,dtCSDGV2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCSDGV2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCSDGV2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCSDGV2RowChangedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV2RowChanged(Me, New dtCSDGV2RowChangeEvent(CType(e.Row,dtCSDGV2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCSDGV2RowChangingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV2RowChanging(Me, New dtCSDGV2RowChangeEvent(CType(e.Row,dtCSDGV2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCSDGV2RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV2RowDeleted(Me, New dtCSDGV2RowChangeEvent(CType(e.Row,dtCSDGV2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCSDGV2RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV2RowDeleting(Me, New dtCSDGV2RowChangeEvent(CType(e.Row,dtCSDGV2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCSDGV2Row(ByVal row As dtCSDGV2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCSDGV2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCSDGV3DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtCSDGV3Row)
        
        Private column過帳日期 As Global.System.Data.DataColumn
        
        Private column代碼 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column隻數 As Global.System.Data.DataColumn
        
        Private column單價 As Global.System.Data.DataColumn
        
        Private column金額 As Global.System.Data.DataColumn
        
        Private column毛重 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCSDGV3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 過帳日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column過帳日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 代碼Column() As Global.System.Data.DataColumn
            Get
                Return Me.column代碼
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 隻數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column隻數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單價Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單價
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 金額Column() As Global.System.Data.DataColumn
            Get
                Return Me.column金額
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 毛重Column() As Global.System.Data.DataColumn
            Get
                Return Me.column毛重
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCSDGV3Row
            Get
                Return CType(Me.Rows(index),dtCSDGV3Row)
            End Get
        End Property
        
        Public Event dtCSDGV3RowChanging As dtCSDGV3RowChangeEventHandler
        
        Public Event dtCSDGV3RowChanged As dtCSDGV3RowChangeEventHandler
        
        Public Event dtCSDGV3RowDeleting As dtCSDGV3RowChangeEventHandler
        
        Public Event dtCSDGV3RowDeleted As dtCSDGV3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCSDGV3Row(ByVal row As dtCSDGV3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCSDGV3Row(ByVal 過帳日期 As String, ByVal 代碼 As String, ByVal 品名 As String, ByVal 隻數 As String, ByVal 單價 As String, ByVal 金額 As String, ByVal 毛重 As String) As dtCSDGV3Row
            Dim rowdtCSDGV3Row As dtCSDGV3Row = CType(Me.NewRow,dtCSDGV3Row)
            Dim columnValuesArray() As Object = New Object() {過帳日期, 代碼, 品名, 隻數, 單價, 金額, 毛重}
            rowdtCSDGV3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCSDGV3Row)
            Return rowdtCSDGV3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCSDGV3DataTable = CType(MyBase.Clone,dtCSDGV3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCSDGV3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column過帳日期 = MyBase.Columns("過帳日期")
            Me.column代碼 = MyBase.Columns("代碼")
            Me.column品名 = MyBase.Columns("品名")
            Me.column隻數 = MyBase.Columns("隻數")
            Me.column單價 = MyBase.Columns("單價")
            Me.column金額 = MyBase.Columns("金額")
            Me.column毛重 = MyBase.Columns("毛重")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column過帳日期 = New Global.System.Data.DataColumn("過帳日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column過帳日期)
            Me.column代碼 = New Global.System.Data.DataColumn("代碼", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column代碼)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column隻數 = New Global.System.Data.DataColumn("隻數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column隻數)
            Me.column單價 = New Global.System.Data.DataColumn("單價", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單價)
            Me.column金額 = New Global.System.Data.DataColumn("金額", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column金額)
            Me.column毛重 = New Global.System.Data.DataColumn("毛重", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column毛重)
            Me.column隻數.Caption = "數量"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCSDGV3Row() As dtCSDGV3Row
            Return CType(Me.NewRow,dtCSDGV3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCSDGV3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCSDGV3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCSDGV3RowChangedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV3RowChanged(Me, New dtCSDGV3RowChangeEvent(CType(e.Row,dtCSDGV3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCSDGV3RowChangingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV3RowChanging(Me, New dtCSDGV3RowChangeEvent(CType(e.Row,dtCSDGV3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCSDGV3RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV3RowDeleted(Me, New dtCSDGV3RowChangeEvent(CType(e.Row,dtCSDGV3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCSDGV3RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV3RowDeleting(Me, New dtCSDGV3RowChangeEvent(CType(e.Row,dtCSDGV3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCSDGV3Row(ByVal row As dtCSDGV3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCSDGV3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCSDGV4DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtCSDGV4Row)
        
        Private column過帳日期 As Global.System.Data.DataColumn
        
        Private column代碼 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column單價 As Global.System.Data.DataColumn
        
        Private column金額 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCSDGV4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 過帳日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column過帳日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 代碼Column() As Global.System.Data.DataColumn
            Get
                Return Me.column代碼
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單價Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單價
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 金額Column() As Global.System.Data.DataColumn
            Get
                Return Me.column金額
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCSDGV4Row
            Get
                Return CType(Me.Rows(index),dtCSDGV4Row)
            End Get
        End Property
        
        Public Event dtCSDGV4RowChanging As dtCSDGV4RowChangeEventHandler
        
        Public Event dtCSDGV4RowChanged As dtCSDGV4RowChangeEventHandler
        
        Public Event dtCSDGV4RowDeleting As dtCSDGV4RowChangeEventHandler
        
        Public Event dtCSDGV4RowDeleted As dtCSDGV4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCSDGV4Row(ByVal row As dtCSDGV4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCSDGV4Row(ByVal 過帳日期 As String, ByVal 代碼 As String, ByVal 品名 As String, ByVal 數量 As String, ByVal 單價 As String, ByVal 金額 As String) As dtCSDGV4Row
            Dim rowdtCSDGV4Row As dtCSDGV4Row = CType(Me.NewRow,dtCSDGV4Row)
            Dim columnValuesArray() As Object = New Object() {過帳日期, 代碼, 品名, 數量, 單價, 金額}
            rowdtCSDGV4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCSDGV4Row)
            Return rowdtCSDGV4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCSDGV4DataTable = CType(MyBase.Clone,dtCSDGV4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCSDGV4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column過帳日期 = MyBase.Columns("過帳日期")
            Me.column代碼 = MyBase.Columns("代碼")
            Me.column品名 = MyBase.Columns("品名")
            Me.column數量 = MyBase.Columns("數量")
            Me.column單價 = MyBase.Columns("單價")
            Me.column金額 = MyBase.Columns("金額")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column過帳日期 = New Global.System.Data.DataColumn("過帳日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column過帳日期)
            Me.column代碼 = New Global.System.Data.DataColumn("代碼", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column代碼)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column單價 = New Global.System.Data.DataColumn("單價", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單價)
            Me.column金額 = New Global.System.Data.DataColumn("金額", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column金額)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCSDGV4Row() As dtCSDGV4Row
            Return CType(Me.NewRow,dtCSDGV4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCSDGV4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCSDGV4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCSDGV4RowChangedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV4RowChanged(Me, New dtCSDGV4RowChangeEvent(CType(e.Row,dtCSDGV4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCSDGV4RowChangingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV4RowChanging(Me, New dtCSDGV4RowChangeEvent(CType(e.Row,dtCSDGV4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCSDGV4RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCSDGV4RowDeleted(Me, New dtCSDGV4RowChangeEvent(CType(e.Row,dtCSDGV4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCSDGV4RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCSDGV4RowDeleting(Me, New dtCSDGV4RowChangeEvent(CType(e.Row,dtCSDGV4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCSDGV4Row(ByVal row As dtCSDGV4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCSDGV4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPayment1DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPayment1Row)
        
        Private column文件單號 As Global.System.Data.DataColumn
        
        Private column日期 As Global.System.Data.DataColumn
        
        Private column驗收單號 As Global.System.Data.DataColumn
        
        Private column到期日 As Global.System.Data.DataColumn
        
        Private column存編 As Global.System.Data.DataColumn
        
        Private column品名規格 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column單位 As Global.System.Data.DataColumn
        
        Private column單價 As Global.System.Data.DataColumn
        
        Private column稅額 As Global.System.Data.DataColumn
        
        Private column小計 As Global.System.Data.DataColumn
        
        Private column運費 As Global.System.Data.DataColumn
        
        Private column最近購價 As Global.System.Data.DataColumn
        
        Private column利潤中心 As Global.System.Data.DataColumn
        
        Private column付款方式 As Global.System.Data.DataColumn
        
        Private column備註 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPayment1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 文件單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column文件單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 驗收單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column驗收單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 到期日Column() As Global.System.Data.DataColumn
            Get
                Return Me.column到期日
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存編Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存編
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名規格Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名規格
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單位Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單位
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單價Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單價
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 稅額Column() As Global.System.Data.DataColumn
            Get
                Return Me.column稅額
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 小計Column() As Global.System.Data.DataColumn
            Get
                Return Me.column小計
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 運費Column() As Global.System.Data.DataColumn
            Get
                Return Me.column運費
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 最近購價Column() As Global.System.Data.DataColumn
            Get
                Return Me.column最近購價
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 利潤中心Column() As Global.System.Data.DataColumn
            Get
                Return Me.column利潤中心
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 付款方式Column() As Global.System.Data.DataColumn
            Get
                Return Me.column付款方式
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 備註Column() As Global.System.Data.DataColumn
            Get
                Return Me.column備註
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPayment1Row
            Get
                Return CType(Me.Rows(index),dtPayment1Row)
            End Get
        End Property
        
        Public Event dtPayment1RowChanging As dtPayment1RowChangeEventHandler
        
        Public Event dtPayment1RowChanged As dtPayment1RowChangeEventHandler
        
        Public Event dtPayment1RowDeleting As dtPayment1RowChangeEventHandler
        
        Public Event dtPayment1RowDeleted As dtPayment1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPayment1Row(ByVal row As dtPayment1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPayment1Row( _
                    ByVal 文件單號 As String,  _
                    ByVal 日期 As String,  _
                    ByVal 驗收單號 As String,  _
                    ByVal 到期日 As String,  _
                    ByVal 存編 As String,  _
                    ByVal 品名規格 As String,  _
                    ByVal 數量 As String,  _
                    ByVal 單位 As String,  _
                    ByVal 單價 As String,  _
                    ByVal 稅額 As String,  _
                    ByVal 小計 As String,  _
                    ByVal 運費 As String,  _
                    ByVal 最近購價 As String,  _
                    ByVal 利潤中心 As String,  _
                    ByVal 付款方式 As String,  _
                    ByVal 備註 As String) As dtPayment1Row
            Dim rowdtPayment1Row As dtPayment1Row = CType(Me.NewRow,dtPayment1Row)
            Dim columnValuesArray() As Object = New Object() {文件單號, 日期, 驗收單號, 到期日, 存編, 品名規格, 數量, 單位, 單價, 稅額, 小計, 運費, 最近購價, 利潤中心, 付款方式, 備註}
            rowdtPayment1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPayment1Row)
            Return rowdtPayment1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPayment1DataTable = CType(MyBase.Clone,dtPayment1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPayment1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column文件單號 = MyBase.Columns("文件單號")
            Me.column日期 = MyBase.Columns("日期")
            Me.column驗收單號 = MyBase.Columns("驗收單號")
            Me.column到期日 = MyBase.Columns("到期日")
            Me.column存編 = MyBase.Columns("存編")
            Me.column品名規格 = MyBase.Columns("品名規格")
            Me.column數量 = MyBase.Columns("數量")
            Me.column單位 = MyBase.Columns("單位")
            Me.column單價 = MyBase.Columns("單價")
            Me.column稅額 = MyBase.Columns("稅額")
            Me.column小計 = MyBase.Columns("小計")
            Me.column運費 = MyBase.Columns("運費")
            Me.column最近購價 = MyBase.Columns("最近購價")
            Me.column利潤中心 = MyBase.Columns("利潤中心")
            Me.column付款方式 = MyBase.Columns("付款方式")
            Me.column備註 = MyBase.Columns("備註")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column文件單號 = New Global.System.Data.DataColumn("文件單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column文件單號)
            Me.column日期 = New Global.System.Data.DataColumn("日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column日期)
            Me.column驗收單號 = New Global.System.Data.DataColumn("驗收單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column驗收單號)
            Me.column到期日 = New Global.System.Data.DataColumn("到期日", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column到期日)
            Me.column存編 = New Global.System.Data.DataColumn("存編", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存編)
            Me.column品名規格 = New Global.System.Data.DataColumn("品名規格", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名規格)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column單位 = New Global.System.Data.DataColumn("單位", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單位)
            Me.column單價 = New Global.System.Data.DataColumn("單價", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單價)
            Me.column稅額 = New Global.System.Data.DataColumn("稅額", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column稅額)
            Me.column小計 = New Global.System.Data.DataColumn("小計", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column小計)
            Me.column運費 = New Global.System.Data.DataColumn("運費", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column運費)
            Me.column最近購價 = New Global.System.Data.DataColumn("最近購價", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column最近購價)
            Me.column利潤中心 = New Global.System.Data.DataColumn("利潤中心", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column利潤中心)
            Me.column付款方式 = New Global.System.Data.DataColumn("付款方式", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column付款方式)
            Me.column備註 = New Global.System.Data.DataColumn("備註", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column備註)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPayment1Row() As dtPayment1Row
            Return CType(Me.NewRow,dtPayment1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPayment1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPayment1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPayment1RowChangedEvent) Is Nothing) Then
                RaiseEvent dtPayment1RowChanged(Me, New dtPayment1RowChangeEvent(CType(e.Row,dtPayment1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPayment1RowChangingEvent) Is Nothing) Then
                RaiseEvent dtPayment1RowChanging(Me, New dtPayment1RowChangeEvent(CType(e.Row,dtPayment1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPayment1RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPayment1RowDeleted(Me, New dtPayment1RowChangeEvent(CType(e.Row,dtPayment1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPayment1RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPayment1RowDeleting(Me, New dtPayment1RowChangeEvent(CType(e.Row,dtPayment1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPayment1Row(ByVal row As dtPayment1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPayment1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPayment2DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPayment2Row)
        
        Private column文件單號 As Global.System.Data.DataColumn
        
        Private column預付款 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPayment2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 文件單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column文件單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 預付款Column() As Global.System.Data.DataColumn
            Get
                Return Me.column預付款
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPayment2Row
            Get
                Return CType(Me.Rows(index),dtPayment2Row)
            End Get
        End Property
        
        Public Event dtPayment2RowChanging As dtPayment2RowChangeEventHandler
        
        Public Event dtPayment2RowChanged As dtPayment2RowChangeEventHandler
        
        Public Event dtPayment2RowDeleting As dtPayment2RowChangeEventHandler
        
        Public Event dtPayment2RowDeleted As dtPayment2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPayment2Row(ByVal row As dtPayment2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPayment2Row(ByVal 文件單號 As String, ByVal 預付款 As String) As dtPayment2Row
            Dim rowdtPayment2Row As dtPayment2Row = CType(Me.NewRow,dtPayment2Row)
            Dim columnValuesArray() As Object = New Object() {文件單號, 預付款}
            rowdtPayment2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPayment2Row)
            Return rowdtPayment2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPayment2DataTable = CType(MyBase.Clone,dtPayment2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPayment2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column文件單號 = MyBase.Columns("文件單號")
            Me.column預付款 = MyBase.Columns("預付款")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column文件單號 = New Global.System.Data.DataColumn("文件單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column文件單號)
            Me.column預付款 = New Global.System.Data.DataColumn("預付款", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column預付款)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPayment2Row() As dtPayment2Row
            Return CType(Me.NewRow,dtPayment2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPayment2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPayment2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPayment2RowChangedEvent) Is Nothing) Then
                RaiseEvent dtPayment2RowChanged(Me, New dtPayment2RowChangeEvent(CType(e.Row,dtPayment2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPayment2RowChangingEvent) Is Nothing) Then
                RaiseEvent dtPayment2RowChanging(Me, New dtPayment2RowChangeEvent(CType(e.Row,dtPayment2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPayment2RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPayment2RowDeleted(Me, New dtPayment2RowChangeEvent(CType(e.Row,dtPayment2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPayment2RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPayment2RowDeleting(Me, New dtPayment2RowChangeEvent(CType(e.Row,dtPayment2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPayment2Row(ByVal row As dtPayment2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPayment2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPayment3DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPayment3Row)
        
        Private column文件單號 As Global.System.Data.DataColumn
        
        Private column運費 As Global.System.Data.DataColumn
        
        Private column毛雞金額 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPayment3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 文件單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column文件單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 運費Column() As Global.System.Data.DataColumn
            Get
                Return Me.column運費
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 毛雞金額Column() As Global.System.Data.DataColumn
            Get
                Return Me.column毛雞金額
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPayment3Row
            Get
                Return CType(Me.Rows(index),dtPayment3Row)
            End Get
        End Property
        
        Public Event dtPayment3RowChanging As dtPayment3RowChangeEventHandler
        
        Public Event dtPayment3RowChanged As dtPayment3RowChangeEventHandler
        
        Public Event dtPayment3RowDeleting As dtPayment3RowChangeEventHandler
        
        Public Event dtPayment3RowDeleted As dtPayment3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPayment3Row(ByVal row As dtPayment3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPayment3Row(ByVal 文件單號 As String, ByVal 運費 As String, ByVal 毛雞金額 As String) As dtPayment3Row
            Dim rowdtPayment3Row As dtPayment3Row = CType(Me.NewRow,dtPayment3Row)
            Dim columnValuesArray() As Object = New Object() {文件單號, 運費, 毛雞金額}
            rowdtPayment3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPayment3Row)
            Return rowdtPayment3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPayment3DataTable = CType(MyBase.Clone,dtPayment3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPayment3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column文件單號 = MyBase.Columns("文件單號")
            Me.column運費 = MyBase.Columns("運費")
            Me.column毛雞金額 = MyBase.Columns("毛雞金額")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column文件單號 = New Global.System.Data.DataColumn("文件單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column文件單號)
            Me.column運費 = New Global.System.Data.DataColumn("運費", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column運費)
            Me.column毛雞金額 = New Global.System.Data.DataColumn("毛雞金額", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column毛雞金額)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPayment3Row() As dtPayment3Row
            Return CType(Me.NewRow,dtPayment3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPayment3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPayment3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPayment3RowChangedEvent) Is Nothing) Then
                RaiseEvent dtPayment3RowChanged(Me, New dtPayment3RowChangeEvent(CType(e.Row,dtPayment3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPayment3RowChangingEvent) Is Nothing) Then
                RaiseEvent dtPayment3RowChanging(Me, New dtPayment3RowChangeEvent(CType(e.Row,dtPayment3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPayment3RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPayment3RowDeleted(Me, New dtPayment3RowChangeEvent(CType(e.Row,dtPayment3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPayment3RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPayment3RowDeleting(Me, New dtPayment3RowChangeEvent(CType(e.Row,dtPayment3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPayment3Row(ByVal row As dtPayment3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPayment3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtSchedulingDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtSchedulingRow)
        
        Private column列號 As Global.System.Data.DataColumn
        
        Private column製單 As Global.System.Data.DataColumn
        
        Private column客戶 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column人數 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtScheduling"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 列號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column列號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製單Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製單
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 客戶Column() As Global.System.Data.DataColumn
            Get
                Return Me.column客戶
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 人數Column() As Global.System.Data.DataColumn
            Get
                Return Me.column人數
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtSchedulingRow
            Get
                Return CType(Me.Rows(index),dtSchedulingRow)
            End Get
        End Property
        
        Public Event dtSchedulingRowChanging As dtSchedulingRowChangeEventHandler
        
        Public Event dtSchedulingRowChanged As dtSchedulingRowChangeEventHandler
        
        Public Event dtSchedulingRowDeleting As dtSchedulingRowChangeEventHandler
        
        Public Event dtSchedulingRowDeleted As dtSchedulingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtSchedulingRow(ByVal row As dtSchedulingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtSchedulingRow(ByVal 列號 As String, ByVal 製單 As String, ByVal 客戶 As String, ByVal 品名 As String, ByVal 數量 As String, ByVal 人數 As String) As dtSchedulingRow
            Dim rowdtSchedulingRow As dtSchedulingRow = CType(Me.NewRow,dtSchedulingRow)
            Dim columnValuesArray() As Object = New Object() {列號, 製單, 客戶, 品名, 數量, 人數}
            rowdtSchedulingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtSchedulingRow)
            Return rowdtSchedulingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtSchedulingDataTable = CType(MyBase.Clone,dtSchedulingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtSchedulingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column列號 = MyBase.Columns("列號")
            Me.column製單 = MyBase.Columns("製單")
            Me.column客戶 = MyBase.Columns("客戶")
            Me.column品名 = MyBase.Columns("品名")
            Me.column數量 = MyBase.Columns("數量")
            Me.column人數 = MyBase.Columns("人數")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column列號 = New Global.System.Data.DataColumn("列號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column列號)
            Me.column製單 = New Global.System.Data.DataColumn("製單", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製單)
            Me.column客戶 = New Global.System.Data.DataColumn("客戶", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column客戶)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column人數 = New Global.System.Data.DataColumn("人數", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column人數)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtSchedulingRow() As dtSchedulingRow
            Return CType(Me.NewRow,dtSchedulingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtSchedulingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtSchedulingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtSchedulingRowChangedEvent) Is Nothing) Then
                RaiseEvent dtSchedulingRowChanged(Me, New dtSchedulingRowChangeEvent(CType(e.Row,dtSchedulingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtSchedulingRowChangingEvent) Is Nothing) Then
                RaiseEvent dtSchedulingRowChanging(Me, New dtSchedulingRowChangeEvent(CType(e.Row,dtSchedulingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtSchedulingRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtSchedulingRowDeleted(Me, New dtSchedulingRowChangeEvent(CType(e.Row,dtSchedulingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtSchedulingRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtSchedulingRowDeleting(Me, New dtSchedulingRowChangeEvent(CType(e.Row,dtSchedulingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtSchedulingRow(ByVal row As dtSchedulingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtSchedulingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtSPickingDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtSPickingRow)
        
        Private column對應 As Global.System.Data.DataColumn
        
        Private column存編 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtSPicking"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 對應Column() As Global.System.Data.DataColumn
            Get
                Return Me.column對應
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存編Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存編
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtSPickingRow
            Get
                Return CType(Me.Rows(index),dtSPickingRow)
            End Get
        End Property
        
        Public Event dtSPickingRowChanging As dtSPickingRowChangeEventHandler
        
        Public Event dtSPickingRowChanged As dtSPickingRowChangeEventHandler
        
        Public Event dtSPickingRowDeleting As dtSPickingRowChangeEventHandler
        
        Public Event dtSPickingRowDeleted As dtSPickingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtSPickingRow(ByVal row As dtSPickingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtSPickingRow(ByVal 對應 As String, ByVal 存編 As String, ByVal 品名 As String, ByVal 數量 As String) As dtSPickingRow
            Dim rowdtSPickingRow As dtSPickingRow = CType(Me.NewRow,dtSPickingRow)
            Dim columnValuesArray() As Object = New Object() {對應, 存編, 品名, 數量}
            rowdtSPickingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtSPickingRow)
            Return rowdtSPickingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtSPickingDataTable = CType(MyBase.Clone,dtSPickingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtSPickingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column對應 = MyBase.Columns("對應")
            Me.column存編 = MyBase.Columns("存編")
            Me.column品名 = MyBase.Columns("品名")
            Me.column數量 = MyBase.Columns("數量")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column對應 = New Global.System.Data.DataColumn("對應", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column對應)
            Me.column存編 = New Global.System.Data.DataColumn("存編", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存編)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtSPickingRow() As dtSPickingRow
            Return CType(Me.NewRow,dtSPickingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtSPickingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtSPickingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtSPickingRowChangedEvent) Is Nothing) Then
                RaiseEvent dtSPickingRowChanged(Me, New dtSPickingRowChangeEvent(CType(e.Row,dtSPickingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtSPickingRowChangingEvent) Is Nothing) Then
                RaiseEvent dtSPickingRowChanging(Me, New dtSPickingRowChangeEvent(CType(e.Row,dtSPickingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtSPickingRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtSPickingRowDeleted(Me, New dtSPickingRowChangeEvent(CType(e.Row,dtSPickingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtSPickingRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtSPickingRowDeleting(Me, New dtSPickingRowChangeEvent(CType(e.Row,dtSPickingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtSPickingRow(ByVal row As dtSPickingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtSPickingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtSPicking1DataTable
        Inherits Global.System.Data.TypedTableBase(Of dtSPicking1Row)
        
        Private column製單 As Global.System.Data.DataColumn
        
        Private column存編 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column總數量 As Global.System.Data.DataColumn
        
        Private column0000 As Global.System.Data.DataColumn
        
        Private column0030 As Global.System.Data.DataColumn
        
        Private column0100 As Global.System.Data.DataColumn
        
        Private column0130 As Global.System.Data.DataColumn
        
        Private column0200 As Global.System.Data.DataColumn
        
        Private column0230 As Global.System.Data.DataColumn
        
        Private column0300 As Global.System.Data.DataColumn
        
        Private column0330 As Global.System.Data.DataColumn
        
        Private column0400 As Global.System.Data.DataColumn
        
        Private column0430 As Global.System.Data.DataColumn
        
        Private column0500 As Global.System.Data.DataColumn
        
        Private column0530 As Global.System.Data.DataColumn
        
        Private column0600 As Global.System.Data.DataColumn
        
        Private column0630 As Global.System.Data.DataColumn
        
        Private column0700 As Global.System.Data.DataColumn
        
        Private column0730 As Global.System.Data.DataColumn
        
        Private column0800 As Global.System.Data.DataColumn
        
        Private column0830 As Global.System.Data.DataColumn
        
        Private column0900 As Global.System.Data.DataColumn
        
        Private column0930 As Global.System.Data.DataColumn
        
        Private column1000 As Global.System.Data.DataColumn
        
        Private column1030 As Global.System.Data.DataColumn
        
        Private column1100 As Global.System.Data.DataColumn
        
        Private column1130 As Global.System.Data.DataColumn
        
        Private column1200 As Global.System.Data.DataColumn
        
        Private column1230 As Global.System.Data.DataColumn
        
        Private column1300 As Global.System.Data.DataColumn
        
        Private column1330 As Global.System.Data.DataColumn
        
        Private column1400 As Global.System.Data.DataColumn
        
        Private column1430 As Global.System.Data.DataColumn
        
        Private column1500 As Global.System.Data.DataColumn
        
        Private column1530 As Global.System.Data.DataColumn
        
        Private column1600 As Global.System.Data.DataColumn
        
        Private column1630 As Global.System.Data.DataColumn
        
        Private column1700 As Global.System.Data.DataColumn
        
        Private column1730 As Global.System.Data.DataColumn
        
        Private column1800 As Global.System.Data.DataColumn
        
        Private column1830 As Global.System.Data.DataColumn
        
        Private column1900 As Global.System.Data.DataColumn
        
        Private column1930 As Global.System.Data.DataColumn
        
        Private column2000 As Global.System.Data.DataColumn
        
        Private column2030 As Global.System.Data.DataColumn
        
        Private column2100 As Global.System.Data.DataColumn
        
        Private column2130 As Global.System.Data.DataColumn
        
        Private column2200 As Global.System.Data.DataColumn
        
        Private column2230 As Global.System.Data.DataColumn
        
        Private column2300 As Global.System.Data.DataColumn
        
        Private column2330 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtSPicking1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製單Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製單
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存編Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存編
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 總數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column總數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0000Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0030Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0030
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0100Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0100
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0130Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0130
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0200Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0200
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0230Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0230
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0300Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0300
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0330Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0330
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0400Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0400
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0430Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0430
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0500Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0500
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0530Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0530
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0600Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0600
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0630Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0630
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0700Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0700
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0730Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0730
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0800Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0800
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0830Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0830
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0900Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0900
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0930Column() As Global.System.Data.DataColumn
            Get
                Return Me.column0930
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1000Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1030Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1030
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1100Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1100
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1130Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1130
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1200Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1200
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1230Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1230
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1300Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1300
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1330Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1330
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1400Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1400
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1430Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1430
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1500Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1500
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1530Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1530
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1600Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1600
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1630Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1630
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1700Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1700
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1730Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1730
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1800Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1800
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1830Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1830
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1900Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1900
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1930Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1930
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2000Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2030Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2030
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2100Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2100
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2130Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2130
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2200Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2200
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2230Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2230
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2300Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2300
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2330Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2330
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtSPicking1Row
            Get
                Return CType(Me.Rows(index),dtSPicking1Row)
            End Get
        End Property
        
        Public Event dtSPicking1RowChanging As dtSPicking1RowChangeEventHandler
        
        Public Event dtSPicking1RowChanged As dtSPicking1RowChangeEventHandler
        
        Public Event dtSPicking1RowDeleting As dtSPicking1RowChangeEventHandler
        
        Public Event dtSPicking1RowDeleted As dtSPicking1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtSPicking1Row(ByVal row As dtSPicking1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtSPicking1Row( _
                    ByVal 製單 As String,  _
                    ByVal 存編 As String,  _
                    ByVal 品名 As String,  _
                    ByVal 總數量 As String,  _
                    ByVal _0000 As String,  _
                    ByVal _0030 As String,  _
                    ByVal _0100 As String,  _
                    ByVal _0130 As String,  _
                    ByVal _0200 As String,  _
                    ByVal _0230 As String,  _
                    ByVal _0300 As String,  _
                    ByVal _0330 As String,  _
                    ByVal _0400 As String,  _
                    ByVal _0430 As String,  _
                    ByVal _0500 As String,  _
                    ByVal _0530 As String,  _
                    ByVal _0600 As String,  _
                    ByVal _0630 As String,  _
                    ByVal _0700 As String,  _
                    ByVal _0730 As String,  _
                    ByVal _0800 As String,  _
                    ByVal _0830 As String,  _
                    ByVal _0900 As String,  _
                    ByVal _0930 As String,  _
                    ByVal _1000 As String,  _
                    ByVal _1030 As String,  _
                    ByVal _1100 As String,  _
                    ByVal _1130 As String,  _
                    ByVal _1200 As String,  _
                    ByVal _1230 As String,  _
                    ByVal _1300 As String,  _
                    ByVal _1330 As String,  _
                    ByVal _1400 As String,  _
                    ByVal _1430 As String,  _
                    ByVal _1500 As String,  _
                    ByVal _1530 As String,  _
                    ByVal _1600 As String,  _
                    ByVal _1630 As String,  _
                    ByVal _1700 As String,  _
                    ByVal _1730 As String,  _
                    ByVal _1800 As String,  _
                    ByVal _1830 As String,  _
                    ByVal _1900 As String,  _
                    ByVal _1930 As String,  _
                    ByVal _2000 As String,  _
                    ByVal _2030 As String,  _
                    ByVal _2100 As String,  _
                    ByVal _2130 As String,  _
                    ByVal _2200 As String,  _
                    ByVal _2230 As String,  _
                    ByVal _2300 As String,  _
                    ByVal _2330 As String) As dtSPicking1Row
            Dim rowdtSPicking1Row As dtSPicking1Row = CType(Me.NewRow,dtSPicking1Row)
            Dim columnValuesArray() As Object = New Object() {製單, 存編, 品名, 總數量, _0000, _0030, _0100, _0130, _0200, _0230, _0300, _0330, _0400, _0430, _0500, _0530, _0600, _0630, _0700, _0730, _0800, _0830, _0900, _0930, _1000, _1030, _1100, _1130, _1200, _1230, _1300, _1330, _1400, _1430, _1500, _1530, _1600, _1630, _1700, _1730, _1800, _1830, _1900, _1930, _2000, _2030, _2100, _2130, _2200, _2230, _2300, _2330}
            rowdtSPicking1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtSPicking1Row)
            Return rowdtSPicking1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtSPicking1DataTable = CType(MyBase.Clone,dtSPicking1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtSPicking1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column製單 = MyBase.Columns("製單")
            Me.column存編 = MyBase.Columns("存編")
            Me.column品名 = MyBase.Columns("品名")
            Me.column總數量 = MyBase.Columns("總數量")
            Me.column0000 = MyBase.Columns("0000")
            Me.column0030 = MyBase.Columns("0030")
            Me.column0100 = MyBase.Columns("0100")
            Me.column0130 = MyBase.Columns("0130")
            Me.column0200 = MyBase.Columns("0200")
            Me.column0230 = MyBase.Columns("0230")
            Me.column0300 = MyBase.Columns("0300")
            Me.column0330 = MyBase.Columns("0330")
            Me.column0400 = MyBase.Columns("0400")
            Me.column0430 = MyBase.Columns("0430")
            Me.column0500 = MyBase.Columns("0500")
            Me.column0530 = MyBase.Columns("0530")
            Me.column0600 = MyBase.Columns("0600")
            Me.column0630 = MyBase.Columns("0630")
            Me.column0700 = MyBase.Columns("0700")
            Me.column0730 = MyBase.Columns("0730")
            Me.column0800 = MyBase.Columns("0800")
            Me.column0830 = MyBase.Columns("0830")
            Me.column0900 = MyBase.Columns("0900")
            Me.column0930 = MyBase.Columns("0930")
            Me.column1000 = MyBase.Columns("1000")
            Me.column1030 = MyBase.Columns("1030")
            Me.column1100 = MyBase.Columns("1100")
            Me.column1130 = MyBase.Columns("1130")
            Me.column1200 = MyBase.Columns("1200")
            Me.column1230 = MyBase.Columns("1230")
            Me.column1300 = MyBase.Columns("1300")
            Me.column1330 = MyBase.Columns("1330")
            Me.column1400 = MyBase.Columns("1400")
            Me.column1430 = MyBase.Columns("1430")
            Me.column1500 = MyBase.Columns("1500")
            Me.column1530 = MyBase.Columns("1530")
            Me.column1600 = MyBase.Columns("1600")
            Me.column1630 = MyBase.Columns("1630")
            Me.column1700 = MyBase.Columns("1700")
            Me.column1730 = MyBase.Columns("1730")
            Me.column1800 = MyBase.Columns("1800")
            Me.column1830 = MyBase.Columns("1830")
            Me.column1900 = MyBase.Columns("1900")
            Me.column1930 = MyBase.Columns("1930")
            Me.column2000 = MyBase.Columns("2000")
            Me.column2030 = MyBase.Columns("2030")
            Me.column2100 = MyBase.Columns("2100")
            Me.column2130 = MyBase.Columns("2130")
            Me.column2200 = MyBase.Columns("2200")
            Me.column2230 = MyBase.Columns("2230")
            Me.column2300 = MyBase.Columns("2300")
            Me.column2330 = MyBase.Columns("2330")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column製單 = New Global.System.Data.DataColumn("製單", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製單)
            Me.column存編 = New Global.System.Data.DataColumn("存編", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存編)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column總數量 = New Global.System.Data.DataColumn("總數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column總數量)
            Me.column0000 = New Global.System.Data.DataColumn("0000", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0000.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0000")
            Me.column0000.ExtendedProperties.Add("Generator_UserColumnName", "0000")
            MyBase.Columns.Add(Me.column0000)
            Me.column0030 = New Global.System.Data.DataColumn("0030", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0030.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0030")
            Me.column0030.ExtendedProperties.Add("Generator_UserColumnName", "0030")
            MyBase.Columns.Add(Me.column0030)
            Me.column0100 = New Global.System.Data.DataColumn("0100", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0100.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0100")
            Me.column0100.ExtendedProperties.Add("Generator_UserColumnName", "0100")
            MyBase.Columns.Add(Me.column0100)
            Me.column0130 = New Global.System.Data.DataColumn("0130", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0130.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0130")
            Me.column0130.ExtendedProperties.Add("Generator_UserColumnName", "0130")
            MyBase.Columns.Add(Me.column0130)
            Me.column0200 = New Global.System.Data.DataColumn("0200", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0200.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0200")
            Me.column0200.ExtendedProperties.Add("Generator_UserColumnName", "0200")
            MyBase.Columns.Add(Me.column0200)
            Me.column0230 = New Global.System.Data.DataColumn("0230", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0230.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0230")
            Me.column0230.ExtendedProperties.Add("Generator_UserColumnName", "0230")
            MyBase.Columns.Add(Me.column0230)
            Me.column0300 = New Global.System.Data.DataColumn("0300", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0300.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0300")
            Me.column0300.ExtendedProperties.Add("Generator_UserColumnName", "0300")
            MyBase.Columns.Add(Me.column0300)
            Me.column0330 = New Global.System.Data.DataColumn("0330", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0330.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0330")
            Me.column0330.ExtendedProperties.Add("Generator_UserColumnName", "0330")
            MyBase.Columns.Add(Me.column0330)
            Me.column0400 = New Global.System.Data.DataColumn("0400", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0400.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0400")
            Me.column0400.ExtendedProperties.Add("Generator_UserColumnName", "0400")
            MyBase.Columns.Add(Me.column0400)
            Me.column0430 = New Global.System.Data.DataColumn("0430", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0430.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0430")
            Me.column0430.ExtendedProperties.Add("Generator_UserColumnName", "0430")
            MyBase.Columns.Add(Me.column0430)
            Me.column0500 = New Global.System.Data.DataColumn("0500", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0500.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0500")
            Me.column0500.ExtendedProperties.Add("Generator_UserColumnName", "0500")
            MyBase.Columns.Add(Me.column0500)
            Me.column0530 = New Global.System.Data.DataColumn("0530", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0530.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0530")
            Me.column0530.ExtendedProperties.Add("Generator_UserColumnName", "0530")
            MyBase.Columns.Add(Me.column0530)
            Me.column0600 = New Global.System.Data.DataColumn("0600", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0600.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0600")
            Me.column0600.ExtendedProperties.Add("Generator_UserColumnName", "0600")
            MyBase.Columns.Add(Me.column0600)
            Me.column0630 = New Global.System.Data.DataColumn("0630", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0630.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0630")
            Me.column0630.ExtendedProperties.Add("Generator_UserColumnName", "0630")
            MyBase.Columns.Add(Me.column0630)
            Me.column0700 = New Global.System.Data.DataColumn("0700", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0700.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0700")
            Me.column0700.ExtendedProperties.Add("Generator_UserColumnName", "0700")
            MyBase.Columns.Add(Me.column0700)
            Me.column0730 = New Global.System.Data.DataColumn("0730", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0730.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0730")
            Me.column0730.ExtendedProperties.Add("Generator_UserColumnName", "0730")
            MyBase.Columns.Add(Me.column0730)
            Me.column0800 = New Global.System.Data.DataColumn("0800", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0800.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0800")
            Me.column0800.ExtendedProperties.Add("Generator_UserColumnName", "0800")
            MyBase.Columns.Add(Me.column0800)
            Me.column0830 = New Global.System.Data.DataColumn("0830", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0830.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0830")
            Me.column0830.ExtendedProperties.Add("Generator_UserColumnName", "0830")
            MyBase.Columns.Add(Me.column0830)
            Me.column0900 = New Global.System.Data.DataColumn("0900", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0900.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0900")
            Me.column0900.ExtendedProperties.Add("Generator_UserColumnName", "0900")
            MyBase.Columns.Add(Me.column0900)
            Me.column0930 = New Global.System.Data.DataColumn("0930", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column0930.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column0930")
            Me.column0930.ExtendedProperties.Add("Generator_UserColumnName", "0930")
            MyBase.Columns.Add(Me.column0930)
            Me.column1000 = New Global.System.Data.DataColumn("1000", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1000.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1000")
            Me.column1000.ExtendedProperties.Add("Generator_UserColumnName", "1000")
            MyBase.Columns.Add(Me.column1000)
            Me.column1030 = New Global.System.Data.DataColumn("1030", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1030.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1030")
            Me.column1030.ExtendedProperties.Add("Generator_UserColumnName", "1030")
            MyBase.Columns.Add(Me.column1030)
            Me.column1100 = New Global.System.Data.DataColumn("1100", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1100.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1100")
            Me.column1100.ExtendedProperties.Add("Generator_UserColumnName", "1100")
            MyBase.Columns.Add(Me.column1100)
            Me.column1130 = New Global.System.Data.DataColumn("1130", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1130.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1130")
            Me.column1130.ExtendedProperties.Add("Generator_UserColumnName", "1130")
            MyBase.Columns.Add(Me.column1130)
            Me.column1200 = New Global.System.Data.DataColumn("1200", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1200.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1200")
            Me.column1200.ExtendedProperties.Add("Generator_UserColumnName", "1200")
            MyBase.Columns.Add(Me.column1200)
            Me.column1230 = New Global.System.Data.DataColumn("1230", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1230.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1230")
            Me.column1230.ExtendedProperties.Add("Generator_UserColumnName", "1230")
            MyBase.Columns.Add(Me.column1230)
            Me.column1300 = New Global.System.Data.DataColumn("1300", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1300.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1300")
            Me.column1300.ExtendedProperties.Add("Generator_UserColumnName", "1300")
            MyBase.Columns.Add(Me.column1300)
            Me.column1330 = New Global.System.Data.DataColumn("1330", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1330.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1330")
            Me.column1330.ExtendedProperties.Add("Generator_UserColumnName", "1330")
            MyBase.Columns.Add(Me.column1330)
            Me.column1400 = New Global.System.Data.DataColumn("1400", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1400.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1400")
            Me.column1400.ExtendedProperties.Add("Generator_UserColumnName", "1400")
            MyBase.Columns.Add(Me.column1400)
            Me.column1430 = New Global.System.Data.DataColumn("1430", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1430.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1430")
            Me.column1430.ExtendedProperties.Add("Generator_UserColumnName", "1430")
            MyBase.Columns.Add(Me.column1430)
            Me.column1500 = New Global.System.Data.DataColumn("1500", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1500.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1500")
            Me.column1500.ExtendedProperties.Add("Generator_UserColumnName", "1500")
            MyBase.Columns.Add(Me.column1500)
            Me.column1530 = New Global.System.Data.DataColumn("1530", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1530.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1530")
            Me.column1530.ExtendedProperties.Add("Generator_UserColumnName", "1530")
            MyBase.Columns.Add(Me.column1530)
            Me.column1600 = New Global.System.Data.DataColumn("1600", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1600.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1600")
            Me.column1600.ExtendedProperties.Add("Generator_UserColumnName", "1600")
            MyBase.Columns.Add(Me.column1600)
            Me.column1630 = New Global.System.Data.DataColumn("1630", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1630.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1630")
            Me.column1630.ExtendedProperties.Add("Generator_UserColumnName", "1630")
            MyBase.Columns.Add(Me.column1630)
            Me.column1700 = New Global.System.Data.DataColumn("1700", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1700.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1700")
            Me.column1700.ExtendedProperties.Add("Generator_UserColumnName", "1700")
            MyBase.Columns.Add(Me.column1700)
            Me.column1730 = New Global.System.Data.DataColumn("1730", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1730.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1730")
            Me.column1730.ExtendedProperties.Add("Generator_UserColumnName", "1730")
            MyBase.Columns.Add(Me.column1730)
            Me.column1800 = New Global.System.Data.DataColumn("1800", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1800.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1800")
            Me.column1800.ExtendedProperties.Add("Generator_UserColumnName", "1800")
            MyBase.Columns.Add(Me.column1800)
            Me.column1830 = New Global.System.Data.DataColumn("1830", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1830.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1830")
            Me.column1830.ExtendedProperties.Add("Generator_UserColumnName", "1830")
            MyBase.Columns.Add(Me.column1830)
            Me.column1900 = New Global.System.Data.DataColumn("1900", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1900.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1900")
            Me.column1900.ExtendedProperties.Add("Generator_UserColumnName", "1900")
            MyBase.Columns.Add(Me.column1900)
            Me.column1930 = New Global.System.Data.DataColumn("1930", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column1930.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1930")
            Me.column1930.ExtendedProperties.Add("Generator_UserColumnName", "1930")
            MyBase.Columns.Add(Me.column1930)
            Me.column2000 = New Global.System.Data.DataColumn("2000", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2000.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2000")
            Me.column2000.ExtendedProperties.Add("Generator_UserColumnName", "2000")
            MyBase.Columns.Add(Me.column2000)
            Me.column2030 = New Global.System.Data.DataColumn("2030", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2030.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2030")
            Me.column2030.ExtendedProperties.Add("Generator_UserColumnName", "2030")
            MyBase.Columns.Add(Me.column2030)
            Me.column2100 = New Global.System.Data.DataColumn("2100", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2100.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2100")
            Me.column2100.ExtendedProperties.Add("Generator_UserColumnName", "2100")
            MyBase.Columns.Add(Me.column2100)
            Me.column2130 = New Global.System.Data.DataColumn("2130", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2130.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2130")
            Me.column2130.ExtendedProperties.Add("Generator_UserColumnName", "2130")
            MyBase.Columns.Add(Me.column2130)
            Me.column2200 = New Global.System.Data.DataColumn("2200", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2200.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2200")
            Me.column2200.ExtendedProperties.Add("Generator_UserColumnName", "2200")
            MyBase.Columns.Add(Me.column2200)
            Me.column2230 = New Global.System.Data.DataColumn("2230", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2230.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2230")
            Me.column2230.ExtendedProperties.Add("Generator_UserColumnName", "2230")
            MyBase.Columns.Add(Me.column2230)
            Me.column2300 = New Global.System.Data.DataColumn("2300", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2300.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2300")
            Me.column2300.ExtendedProperties.Add("Generator_UserColumnName", "2300")
            MyBase.Columns.Add(Me.column2300)
            Me.column2330 = New Global.System.Data.DataColumn("2330", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2330.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2330")
            Me.column2330.ExtendedProperties.Add("Generator_UserColumnName", "2330")
            MyBase.Columns.Add(Me.column2330)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtSPicking1Row() As dtSPicking1Row
            Return CType(Me.NewRow,dtSPicking1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtSPicking1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtSPicking1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtSPicking1RowChangedEvent) Is Nothing) Then
                RaiseEvent dtSPicking1RowChanged(Me, New dtSPicking1RowChangeEvent(CType(e.Row,dtSPicking1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtSPicking1RowChangingEvent) Is Nothing) Then
                RaiseEvent dtSPicking1RowChanging(Me, New dtSPicking1RowChangeEvent(CType(e.Row,dtSPicking1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtSPicking1RowDeletedEvent) Is Nothing) Then
                RaiseEvent dtSPicking1RowDeleted(Me, New dtSPicking1RowChangeEvent(CType(e.Row,dtSPicking1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtSPicking1RowDeletingEvent) Is Nothing) Then
                RaiseEvent dtSPicking1RowDeleting(Me, New dtSPicking1RowChangeEvent(CType(e.Row,dtSPicking1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtSPicking1Row(ByVal row As dtSPicking1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtSPicking1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtDispatchingDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtDispatchingRow)
        
        Private column區別 As Global.System.Data.DataColumn
        
        Private column製單 As Global.System.Data.DataColumn
        
        Private column存編 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column單號 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtDispatching"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 區別Column() As Global.System.Data.DataColumn
            Get
                Return Me.column區別
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製單Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製單
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存編Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存編
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtDispatchingRow
            Get
                Return CType(Me.Rows(index),dtDispatchingRow)
            End Get
        End Property
        
        Public Event dtDispatchingRowChanging As dtDispatchingRowChangeEventHandler
        
        Public Event dtDispatchingRowChanged As dtDispatchingRowChangeEventHandler
        
        Public Event dtDispatchingRowDeleting As dtDispatchingRowChangeEventHandler
        
        Public Event dtDispatchingRowDeleted As dtDispatchingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtDispatchingRow(ByVal row As dtDispatchingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtDispatchingRow(ByVal 區別 As String, ByVal 製單 As String, ByVal 存編 As String, ByVal 品名 As String, ByVal 數量 As String, ByVal 單號 As String) As dtDispatchingRow
            Dim rowdtDispatchingRow As dtDispatchingRow = CType(Me.NewRow,dtDispatchingRow)
            Dim columnValuesArray() As Object = New Object() {區別, 製單, 存編, 品名, 數量, 單號}
            rowdtDispatchingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtDispatchingRow)
            Return rowdtDispatchingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtDispatchingDataTable = CType(MyBase.Clone,dtDispatchingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtDispatchingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column區別 = MyBase.Columns("區別")
            Me.column製單 = MyBase.Columns("製單")
            Me.column存編 = MyBase.Columns("存編")
            Me.column品名 = MyBase.Columns("品名")
            Me.column數量 = MyBase.Columns("數量")
            Me.column單號 = MyBase.Columns("單號")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column區別 = New Global.System.Data.DataColumn("區別", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column區別)
            Me.column製單 = New Global.System.Data.DataColumn("製單", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製單)
            Me.column存編 = New Global.System.Data.DataColumn("存編", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存編)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column單號 = New Global.System.Data.DataColumn("單號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單號)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtDispatchingRow() As dtDispatchingRow
            Return CType(Me.NewRow,dtDispatchingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtDispatchingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtDispatchingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtDispatchingRowChangedEvent) Is Nothing) Then
                RaiseEvent dtDispatchingRowChanged(Me, New dtDispatchingRowChangeEvent(CType(e.Row,dtDispatchingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtDispatchingRowChangingEvent) Is Nothing) Then
                RaiseEvent dtDispatchingRowChanging(Me, New dtDispatchingRowChangeEvent(CType(e.Row,dtDispatchingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtDispatchingRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtDispatchingRowDeleted(Me, New dtDispatchingRowChangeEvent(CType(e.Row,dtDispatchingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtDispatchingRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtDispatchingRowDeleting(Me, New dtDispatchingRowChangeEvent(CType(e.Row,dtDispatchingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtDispatchingRow(ByVal row As dtDispatchingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtDispatchingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_KS_Z_StockApply_DetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_KS_Z_StockApply_DetailRow)
        
        Private columnProCode As Global.System.Data.DataColumn
        
        Private columnProName As Global.System.Data.DataColumn
        
        Private columnNum As Global.System.Data.DataColumn
        
        Private columnFldValue As Global.System.Data.DataColumn
        
        Private columnMEMO As Global.System.Data.DataColumn
        
        Private columnFldName As Global.System.Data.DataColumn
        
        Private columnFrgnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_KS_Z_StockApply_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FldValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFldValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FldNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFldName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FrgnNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrgnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_KS_Z_StockApply_DetailRow
            Get
                Return CType(Me.Rows(index),dt_KS_Z_StockApply_DetailRow)
            End Get
        End Property
        
        Public Event dt_KS_Z_StockApply_DetailRowChanging As dt_KS_Z_StockApply_DetailRowChangeEventHandler
        
        Public Event dt_KS_Z_StockApply_DetailRowChanged As dt_KS_Z_StockApply_DetailRowChangeEventHandler
        
        Public Event dt_KS_Z_StockApply_DetailRowDeleting As dt_KS_Z_StockApply_DetailRowChangeEventHandler
        
        Public Event dt_KS_Z_StockApply_DetailRowDeleted As dt_KS_Z_StockApply_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_KS_Z_StockApply_DetailRow(ByVal row As dt_KS_Z_StockApply_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_KS_Z_StockApply_DetailRow(ByVal ProCode As String, ByVal ProName As String, ByVal Num As String, ByVal FldValue As String, ByVal MEMO As String, ByVal FldName As String, ByVal FrgnName As String) As dt_KS_Z_StockApply_DetailRow
            Dim rowdt_KS_Z_StockApply_DetailRow As dt_KS_Z_StockApply_DetailRow = CType(Me.NewRow,dt_KS_Z_StockApply_DetailRow)
            Dim columnValuesArray() As Object = New Object() {ProCode, ProName, Num, FldValue, MEMO, FldName, FrgnName}
            rowdt_KS_Z_StockApply_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_KS_Z_StockApply_DetailRow)
            Return rowdt_KS_Z_StockApply_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_KS_Z_StockApply_DetailDataTable = CType(MyBase.Clone,dt_KS_Z_StockApply_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_KS_Z_StockApply_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProCode = MyBase.Columns("ProCode")
            Me.columnProName = MyBase.Columns("ProName")
            Me.columnNum = MyBase.Columns("Num")
            Me.columnFldValue = MyBase.Columns("FldValue")
            Me.columnMEMO = MyBase.Columns("MEMO")
            Me.columnFldName = MyBase.Columns("FldName")
            Me.columnFrgnName = MyBase.Columns("FrgnName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProCode = New Global.System.Data.DataColumn("ProCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProCode)
            Me.columnProName = New Global.System.Data.DataColumn("ProName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProName)
            Me.columnNum = New Global.System.Data.DataColumn("Num", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum)
            Me.columnFldValue = New Global.System.Data.DataColumn("FldValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFldValue)
            Me.columnMEMO = New Global.System.Data.DataColumn("MEMO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMO)
            Me.columnFldName = New Global.System.Data.DataColumn("FldName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFldName)
            Me.columnFrgnName = New Global.System.Data.DataColumn("FrgnName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrgnName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_KS_Z_StockApply_DetailRow() As dt_KS_Z_StockApply_DetailRow
            Return CType(Me.NewRow,dt_KS_Z_StockApply_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_KS_Z_StockApply_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_KS_Z_StockApply_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_KS_Z_StockApply_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_KS_Z_StockApply_DetailRowChanged(Me, New dt_KS_Z_StockApply_DetailRowChangeEvent(CType(e.Row,dt_KS_Z_StockApply_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_KS_Z_StockApply_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_KS_Z_StockApply_DetailRowChanging(Me, New dt_KS_Z_StockApply_DetailRowChangeEvent(CType(e.Row,dt_KS_Z_StockApply_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_KS_Z_StockApply_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_KS_Z_StockApply_DetailRowDeleted(Me, New dt_KS_Z_StockApply_DetailRowChangeEvent(CType(e.Row,dt_KS_Z_StockApply_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_KS_Z_StockApply_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_KS_Z_StockApply_DetailRowDeleting(Me, New dt_KS_Z_StockApply_DetailRowChangeEvent(CType(e.Row,dt_KS_Z_StockApply_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_KS_Z_StockApply_DetailRow(ByVal row As dt_KS_Z_StockApply_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_KS_Z_StockApply_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_KS_Z_WelfareDataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_KS_Z_WelfareRow)
        
        Private column存編 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column條碼 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column重量 As Global.System.Data.DataColumn
        
        Private column員工姓名 As Global.System.Data.DataColumn
        
        Private column員工編號 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_KS_Z_Welfare"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存編Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存編
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 條碼Column() As Global.System.Data.DataColumn
            Get
                Return Me.column條碼
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 重量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column重量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 員工姓名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column員工姓名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 員工編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column員工編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_KS_Z_WelfareRow
            Get
                Return CType(Me.Rows(index),dt_KS_Z_WelfareRow)
            End Get
        End Property
        
        Public Event dt_KS_Z_WelfareRowChanging As dt_KS_Z_WelfareRowChangeEventHandler
        
        Public Event dt_KS_Z_WelfareRowChanged As dt_KS_Z_WelfareRowChangeEventHandler
        
        Public Event dt_KS_Z_WelfareRowDeleting As dt_KS_Z_WelfareRowChangeEventHandler
        
        Public Event dt_KS_Z_WelfareRowDeleted As dt_KS_Z_WelfareRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_KS_Z_WelfareRow(ByVal row As dt_KS_Z_WelfareRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_KS_Z_WelfareRow(ByVal 存編 As String, ByVal 品名 As String, ByVal 條碼 As String, ByVal 數量 As String, ByVal 重量 As String, ByVal 員工姓名 As String, ByVal 員工編號 As String) As dt_KS_Z_WelfareRow
            Dim rowdt_KS_Z_WelfareRow As dt_KS_Z_WelfareRow = CType(Me.NewRow,dt_KS_Z_WelfareRow)
            Dim columnValuesArray() As Object = New Object() {存編, 品名, 條碼, 數量, 重量, 員工姓名, 員工編號}
            rowdt_KS_Z_WelfareRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_KS_Z_WelfareRow)
            Return rowdt_KS_Z_WelfareRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_KS_Z_WelfareDataTable = CType(MyBase.Clone,dt_KS_Z_WelfareDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_KS_Z_WelfareDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column存編 = MyBase.Columns("存編")
            Me.column品名 = MyBase.Columns("品名")
            Me.column條碼 = MyBase.Columns("條碼")
            Me.column數量 = MyBase.Columns("數量")
            Me.column重量 = MyBase.Columns("重量")
            Me.column員工姓名 = MyBase.Columns("員工姓名")
            Me.column員工編號 = MyBase.Columns("員工編號")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column存編 = New Global.System.Data.DataColumn("存編", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存編)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column條碼 = New Global.System.Data.DataColumn("條碼", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column條碼)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column重量 = New Global.System.Data.DataColumn("重量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column重量)
            Me.column員工姓名 = New Global.System.Data.DataColumn("員工姓名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column員工姓名)
            Me.column員工編號 = New Global.System.Data.DataColumn("員工編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column員工編號)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_KS_Z_WelfareRow() As dt_KS_Z_WelfareRow
            Return CType(Me.NewRow,dt_KS_Z_WelfareRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_KS_Z_WelfareRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_KS_Z_WelfareRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_KS_Z_WelfareRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_KS_Z_WelfareRowChanged(Me, New dt_KS_Z_WelfareRowChangeEvent(CType(e.Row,dt_KS_Z_WelfareRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_KS_Z_WelfareRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_KS_Z_WelfareRowChanging(Me, New dt_KS_Z_WelfareRowChangeEvent(CType(e.Row,dt_KS_Z_WelfareRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_KS_Z_WelfareRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_KS_Z_WelfareRowDeleted(Me, New dt_KS_Z_WelfareRowChangeEvent(CType(e.Row,dt_KS_Z_WelfareRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_KS_Z_WelfareRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_KS_Z_WelfareRowDeleting(Me, New dt_KS_Z_WelfareRowChangeEvent(CType(e.Row,dt_KS_Z_WelfareRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_KS_Z_WelfareRow(ByVal row As dt_KS_Z_WelfareRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_KS_Z_WelfareDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_KS_A_EC_DetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_KS_A_EC_DetailRow)
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDscription As Global.System.Data.DataColumn
        
        Private columnAtttibuteType As Global.System.Data.DataColumn
        
        Private column本次數量 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_KS_A_EC_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DscriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDscription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtttibuteTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtttibuteType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 本次數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column本次數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_KS_A_EC_DetailRow
            Get
                Return CType(Me.Rows(index),dt_KS_A_EC_DetailRow)
            End Get
        End Property
        
        Public Event dt_KS_A_EC_DetailRowChanging As dt_KS_A_EC_DetailRowChangeEventHandler
        
        Public Event dt_KS_A_EC_DetailRowChanged As dt_KS_A_EC_DetailRowChangeEventHandler
        
        Public Event dt_KS_A_EC_DetailRowDeleting As dt_KS_A_EC_DetailRowChangeEventHandler
        
        Public Event dt_KS_A_EC_DetailRowDeleted As dt_KS_A_EC_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_KS_A_EC_DetailRow(ByVal row As dt_KS_A_EC_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_KS_A_EC_DetailRow(ByVal ItemCode As String, ByVal Dscription As String, ByVal AtttibuteType As String, ByVal 本次數量 As String) As dt_KS_A_EC_DetailRow
            Dim rowdt_KS_A_EC_DetailRow As dt_KS_A_EC_DetailRow = CType(Me.NewRow,dt_KS_A_EC_DetailRow)
            Dim columnValuesArray() As Object = New Object() {ItemCode, Dscription, AtttibuteType, 本次數量}
            rowdt_KS_A_EC_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_KS_A_EC_DetailRow)
            Return rowdt_KS_A_EC_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_KS_A_EC_DetailDataTable = CType(MyBase.Clone,dt_KS_A_EC_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_KS_A_EC_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDscription = MyBase.Columns("Dscription")
            Me.columnAtttibuteType = MyBase.Columns("AtttibuteType")
            Me.column本次數量 = MyBase.Columns("本次數量")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDscription = New Global.System.Data.DataColumn("Dscription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDscription)
            Me.columnAtttibuteType = New Global.System.Data.DataColumn("AtttibuteType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtttibuteType)
            Me.column本次數量 = New Global.System.Data.DataColumn("本次數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column本次數量)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_KS_A_EC_DetailRow() As dt_KS_A_EC_DetailRow
            Return CType(Me.NewRow,dt_KS_A_EC_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_KS_A_EC_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_KS_A_EC_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_KS_A_EC_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_KS_A_EC_DetailRowChanged(Me, New dt_KS_A_EC_DetailRowChangeEvent(CType(e.Row,dt_KS_A_EC_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_KS_A_EC_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_KS_A_EC_DetailRowChanging(Me, New dt_KS_A_EC_DetailRowChangeEvent(CType(e.Row,dt_KS_A_EC_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_KS_A_EC_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_KS_A_EC_DetailRowDeleted(Me, New dt_KS_A_EC_DetailRowChangeEvent(CType(e.Row,dt_KS_A_EC_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_KS_A_EC_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_KS_A_EC_DetailRowDeleting(Me, New dt_KS_A_EC_DetailRowChangeEvent(CType(e.Row,dt_KS_A_EC_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_KS_A_EC_DetailRow(ByVal row As dt_KS_A_EC_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_KS_A_EC_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_KS_A_ECOrder_DetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_KS_A_ECOrder_DetailRow)
        
        Private column通路商品型號 As Global.System.Data.DataColumn
        
        Private column通路商品名稱 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_KS_A_ECOrder_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 通路商品型號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column通路商品型號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 通路商品名稱Column() As Global.System.Data.DataColumn
            Get
                Return Me.column通路商品名稱
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_KS_A_ECOrder_DetailRow
            Get
                Return CType(Me.Rows(index),dt_KS_A_ECOrder_DetailRow)
            End Get
        End Property
        
        Public Event dt_KS_A_ECOrder_DetailRowChanging As dt_KS_A_ECOrder_DetailRowChangeEventHandler
        
        Public Event dt_KS_A_ECOrder_DetailRowChanged As dt_KS_A_ECOrder_DetailRowChangeEventHandler
        
        Public Event dt_KS_A_ECOrder_DetailRowDeleting As dt_KS_A_ECOrder_DetailRowChangeEventHandler
        
        Public Event dt_KS_A_ECOrder_DetailRowDeleted As dt_KS_A_ECOrder_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_KS_A_ECOrder_DetailRow(ByVal row As dt_KS_A_ECOrder_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_KS_A_ECOrder_DetailRow(ByVal 通路商品型號 As String, ByVal 通路商品名稱 As String, ByVal 數量 As String) As dt_KS_A_ECOrder_DetailRow
            Dim rowdt_KS_A_ECOrder_DetailRow As dt_KS_A_ECOrder_DetailRow = CType(Me.NewRow,dt_KS_A_ECOrder_DetailRow)
            Dim columnValuesArray() As Object = New Object() {通路商品型號, 通路商品名稱, 數量}
            rowdt_KS_A_ECOrder_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_KS_A_ECOrder_DetailRow)
            Return rowdt_KS_A_ECOrder_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_KS_A_ECOrder_DetailDataTable = CType(MyBase.Clone,dt_KS_A_ECOrder_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_KS_A_ECOrder_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column通路商品型號 = MyBase.Columns("通路商品型號")
            Me.column通路商品名稱 = MyBase.Columns("通路商品名稱")
            Me.column數量 = MyBase.Columns("數量")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column通路商品型號 = New Global.System.Data.DataColumn("通路商品型號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column通路商品型號)
            Me.column通路商品名稱 = New Global.System.Data.DataColumn("通路商品名稱", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column通路商品名稱)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column通路商品型號.Caption = "ItemCode"
            Me.column通路商品名稱.Caption = "Dscription"
            Me.column數量.Caption = "AtttibuteType"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_KS_A_ECOrder_DetailRow() As dt_KS_A_ECOrder_DetailRow
            Return CType(Me.NewRow,dt_KS_A_ECOrder_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_KS_A_ECOrder_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_KS_A_ECOrder_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_KS_A_ECOrder_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_KS_A_ECOrder_DetailRowChanged(Me, New dt_KS_A_ECOrder_DetailRowChangeEvent(CType(e.Row,dt_KS_A_ECOrder_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_KS_A_ECOrder_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_KS_A_ECOrder_DetailRowChanging(Me, New dt_KS_A_ECOrder_DetailRowChangeEvent(CType(e.Row,dt_KS_A_ECOrder_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_KS_A_ECOrder_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_KS_A_ECOrder_DetailRowDeleted(Me, New dt_KS_A_ECOrder_DetailRowChangeEvent(CType(e.Row,dt_KS_A_ECOrder_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_KS_A_ECOrder_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_KS_A_ECOrder_DetailRowDeleting(Me, New dt_KS_A_ECOrder_DetailRowChangeEvent(CType(e.Row,dt_KS_A_ECOrder_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_KS_A_ECOrder_DetailRow(ByVal row As dt_KS_A_ECOrder_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_KS_A_ECOrder_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_加工原料肉領料單DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_加工原料肉領料單Row)
        
        Private column草稿單號 As Global.System.Data.DataColumn
        
        Private column製單編號 As Global.System.Data.DataColumn
        
        Private column備註 As Global.System.Data.DataColumn
        
        Private column過帳日期 As Global.System.Data.DataColumn
        
        Private column文件日期 As Global.System.Data.DataColumn
        
        Private column存編 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column單位 As Global.System.Data.DataColumn
        
        Private column數量2 As Global.System.Data.DataColumn
        
        Private column小單位 As Global.System.Data.DataColumn
        
        Private column合計 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_加工原料肉領料單"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 草稿單號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column草稿單號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製單編號Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製單編號
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 備註Column() As Global.System.Data.DataColumn
            Get
                Return Me.column備註
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 過帳日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column過帳日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 文件日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column文件日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存編Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存編
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 單位Column() As Global.System.Data.DataColumn
            Get
                Return Me.column單位
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 小單位Column() As Global.System.Data.DataColumn
            Get
                Return Me.column小單位
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 合計Column() As Global.System.Data.DataColumn
            Get
                Return Me.column合計
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_加工原料肉領料單Row
            Get
                Return CType(Me.Rows(index),dt_加工原料肉領料單Row)
            End Get
        End Property
        
        Public Event dt_加工原料肉領料單RowChanging As dt_加工原料肉領料單RowChangeEventHandler
        
        Public Event dt_加工原料肉領料單RowChanged As dt_加工原料肉領料單RowChangeEventHandler
        
        Public Event dt_加工原料肉領料單RowDeleting As dt_加工原料肉領料單RowChangeEventHandler
        
        Public Event dt_加工原料肉領料單RowDeleted As dt_加工原料肉領料單RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_加工原料肉領料單Row(ByVal row As dt_加工原料肉領料單Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_加工原料肉領料單Row(ByVal 草稿單號 As Integer, ByVal 製單編號 As String, ByVal 備註 As String, ByVal 過帳日期 As Date, ByVal 文件日期 As Date, ByVal 存編 As String, ByVal 品名 As String, ByVal 數量 As Decimal, ByVal 單位 As String, ByVal 數量2 As Decimal, ByVal 小單位 As String, ByVal 合計 As Decimal) As dt_加工原料肉領料單Row
            Dim rowdt_加工原料肉領料單Row As dt_加工原料肉領料單Row = CType(Me.NewRow,dt_加工原料肉領料單Row)
            Dim columnValuesArray() As Object = New Object() {草稿單號, 製單編號, 備註, 過帳日期, 文件日期, 存編, 品名, 數量, 單位, 數量2, 小單位, 合計}
            rowdt_加工原料肉領料單Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_加工原料肉領料單Row)
            Return rowdt_加工原料肉領料單Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_加工原料肉領料單DataTable = CType(MyBase.Clone,dt_加工原料肉領料單DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_加工原料肉領料單DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column草稿單號 = MyBase.Columns("草稿單號")
            Me.column製單編號 = MyBase.Columns("製單編號")
            Me.column備註 = MyBase.Columns("備註")
            Me.column過帳日期 = MyBase.Columns("過帳日期")
            Me.column文件日期 = MyBase.Columns("文件日期")
            Me.column存編 = MyBase.Columns("存編")
            Me.column品名 = MyBase.Columns("品名")
            Me.column數量 = MyBase.Columns("數量")
            Me.column單位 = MyBase.Columns("單位")
            Me.column數量2 = MyBase.Columns("數量2")
            Me.column小單位 = MyBase.Columns("小單位")
            Me.column合計 = MyBase.Columns("合計")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column草稿單號 = New Global.System.Data.DataColumn("草稿單號", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column草稿單號)
            Me.column製單編號 = New Global.System.Data.DataColumn("製單編號", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製單編號)
            Me.column備註 = New Global.System.Data.DataColumn("備註", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column備註)
            Me.column過帳日期 = New Global.System.Data.DataColumn("過帳日期", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column過帳日期)
            Me.column文件日期 = New Global.System.Data.DataColumn("文件日期", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column文件日期)
            Me.column存編 = New Global.System.Data.DataColumn("存編", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存編)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column單位 = New Global.System.Data.DataColumn("單位", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column單位)
            Me.column數量2 = New Global.System.Data.DataColumn("數量2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量2)
            Me.column小單位 = New Global.System.Data.DataColumn("小單位", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column小單位)
            Me.column合計 = New Global.System.Data.DataColumn("合計", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column合計)
            Me.column草稿單號.AllowDBNull = false
            Me.column製單編號.MaxLength = 2147483647
            Me.column備註.MaxLength = 254
            Me.column存編.MaxLength = 20
            Me.column品名.MaxLength = 100
            Me.column單位.MaxLength = 20
            Me.column小單位.MaxLength = 2147483647
            Me.column合計.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_加工原料肉領料單Row() As dt_加工原料肉領料單Row
            Return CType(Me.NewRow,dt_加工原料肉領料單Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_加工原料肉領料單Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_加工原料肉領料單Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_加工原料肉領料單RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_加工原料肉領料單RowChanged(Me, New dt_加工原料肉領料單RowChangeEvent(CType(e.Row,dt_加工原料肉領料單Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_加工原料肉領料單RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_加工原料肉領料單RowChanging(Me, New dt_加工原料肉領料單RowChangeEvent(CType(e.Row,dt_加工原料肉領料單Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_加工原料肉領料單RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_加工原料肉領料單RowDeleted(Me, New dt_加工原料肉領料單RowChangeEvent(CType(e.Row,dt_加工原料肉領料單Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_加工原料肉領料單RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_加工原料肉領料單RowDeleting(Me, New dt_加工原料肉領料單RowChangeEvent(CType(e.Row,dt_加工原料肉領料單Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_加工原料肉領料單Row(ByVal row As dt_加工原料肉領料單Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_加工原料肉領料單DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_冷藏貨庫存表DataTable
        Inherits Global.System.Data.TypedTableBase(Of dt_冷藏貨庫存表Row)
        
        Private column存編 As Global.System.Data.DataColumn
        
        Private column品名 As Global.System.Data.DataColumn
        
        Private column總數量 As Global.System.Data.DataColumn
        
        Private column數量 As Global.System.Data.DataColumn
        
        Private column製造日期 As Global.System.Data.DataColumn
        
        Private column未入庫數量 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_冷藏貨庫存表"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 存編Column() As Global.System.Data.DataColumn
            Get
                Return Me.column存編
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 品名Column() As Global.System.Data.DataColumn
            Get
                Return Me.column品名
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 總數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column總數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 製造日期Column() As Global.System.Data.DataColumn
            Get
                Return Me.column製造日期
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property 未入庫數量Column() As Global.System.Data.DataColumn
            Get
                Return Me.column未入庫數量
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_冷藏貨庫存表Row
            Get
                Return CType(Me.Rows(index),dt_冷藏貨庫存表Row)
            End Get
        End Property
        
        Public Event dt_冷藏貨庫存表RowChanging As dt_冷藏貨庫存表RowChangeEventHandler
        
        Public Event dt_冷藏貨庫存表RowChanged As dt_冷藏貨庫存表RowChangeEventHandler
        
        Public Event dt_冷藏貨庫存表RowDeleting As dt_冷藏貨庫存表RowChangeEventHandler
        
        Public Event dt_冷藏貨庫存表RowDeleted As dt_冷藏貨庫存表RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_冷藏貨庫存表Row(ByVal row As dt_冷藏貨庫存表Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_冷藏貨庫存表Row(ByVal 存編 As String, ByVal 品名 As String, ByVal 總數量 As String, ByVal 數量 As String, ByVal 製造日期 As String, ByVal 未入庫數量 As String) As dt_冷藏貨庫存表Row
            Dim rowdt_冷藏貨庫存表Row As dt_冷藏貨庫存表Row = CType(Me.NewRow,dt_冷藏貨庫存表Row)
            Dim columnValuesArray() As Object = New Object() {存編, 品名, 總數量, 數量, 製造日期, 未入庫數量}
            rowdt_冷藏貨庫存表Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_冷藏貨庫存表Row)
            Return rowdt_冷藏貨庫存表Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_冷藏貨庫存表DataTable = CType(MyBase.Clone,dt_冷藏貨庫存表DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_冷藏貨庫存表DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.column存編 = MyBase.Columns("存編")
            Me.column品名 = MyBase.Columns("品名")
            Me.column總數量 = MyBase.Columns("總數量")
            Me.column數量 = MyBase.Columns("數量")
            Me.column製造日期 = MyBase.Columns("製造日期")
            Me.column未入庫數量 = MyBase.Columns("未入庫數量")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.column存編 = New Global.System.Data.DataColumn("存編", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column存編)
            Me.column品名 = New Global.System.Data.DataColumn("品名", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column品名)
            Me.column總數量 = New Global.System.Data.DataColumn("總數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column總數量)
            Me.column數量 = New Global.System.Data.DataColumn("數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column數量)
            Me.column製造日期 = New Global.System.Data.DataColumn("製造日期", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column製造日期)
            Me.column未入庫數量 = New Global.System.Data.DataColumn("未入庫數量", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column未入庫數量)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_冷藏貨庫存表Row() As dt_冷藏貨庫存表Row
            Return CType(Me.NewRow,dt_冷藏貨庫存表Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_冷藏貨庫存表Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_冷藏貨庫存表Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_冷藏貨庫存表RowChangedEvent) Is Nothing) Then
                RaiseEvent dt_冷藏貨庫存表RowChanged(Me, New dt_冷藏貨庫存表RowChangeEvent(CType(e.Row,dt_冷藏貨庫存表Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_冷藏貨庫存表RowChangingEvent) Is Nothing) Then
                RaiseEvent dt_冷藏貨庫存表RowChanging(Me, New dt_冷藏貨庫存表RowChangeEvent(CType(e.Row,dt_冷藏貨庫存表Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_冷藏貨庫存表RowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_冷藏貨庫存表RowDeleted(Me, New dt_冷藏貨庫存表RowChangeEvent(CType(e.Row,dt_冷藏貨庫存表Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_冷藏貨庫存表RowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_冷藏貨庫存表RowDeleting(Me, New dt_冷藏貨庫存表RowChangeEvent(CType(e.Row,dt_冷藏貨庫存表Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_冷藏貨庫存表Row(ByVal row As dt_冷藏貨庫存表Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportDataSet = New ReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_冷藏貨庫存表DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtThroughputRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtThroughput As dtThroughputDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtThroughput = CType(Me.Table,dtThroughputDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtThroughput.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtThroughput' 中資料行 'ItemCode' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtThroughput.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtThroughput.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtThroughput' 中資料行 'ItemName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtThroughput.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FI118() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtThroughput.FI118Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtThroughput' 中資料行 'FI118' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtThroughput.FI118Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_M07() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtThroughput.U_M07Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtThroughput' 中資料行 'U_M07' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtThroughput.U_M07Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalPackUn() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtThroughput.SalPackUnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtThroughput' 中資料行 'SalPackUn' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtThroughput.SalPackUnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FI123() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtThroughput.FI123Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtThroughput' 中資料行 'FI123' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtThroughput.FI123Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_M02() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtThroughput.U_M02Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtThroughput' 中資料行 'U_M02' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtThroughput.U_M02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tabledtThroughput.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tabledtThroughput.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tabledtThroughput.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tabledtThroughput.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFI118Null() As Boolean
            Return Me.IsNull(Me.tabledtThroughput.FI118Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFI118Null()
            Me(Me.tabledtThroughput.FI118Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_M07Null() As Boolean
            Return Me.IsNull(Me.tabledtThroughput.U_M07Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_M07Null()
            Me(Me.tabledtThroughput.U_M07Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalPackUnNull() As Boolean
            Return Me.IsNull(Me.tabledtThroughput.SalPackUnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalPackUnNull()
            Me(Me.tabledtThroughput.SalPackUnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFI123Null() As Boolean
            Return Me.IsNull(Me.tabledtThroughput.FI123Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFI123Null()
            Me(Me.tabledtThroughput.FI123Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_M02Null() As Boolean
            Return Me.IsNull(Me.tabledtThroughput.U_M02Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_M02Null()
            Me(Me.tabledtThroughput.U_M02Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtMeltsRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtMelts As dtMeltsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtMelts = CType(Me.Table,dtMeltsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製造單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.製造單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '製造單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.製造單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存貨編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.存貨編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '存貨編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.存貨編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名規格() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.品名規格Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '品名規格' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.品名規格Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單位() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.單位Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '單位' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.單位Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 產出合計() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.產出合計Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '產出合計' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.產出合計Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 入料合計() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.入料合計Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '入料合計' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.入料合計Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製成率() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.製成率Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '製成率' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.製成率Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 工時數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMelts.工時數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtMelts' 中資料行 '工時數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMelts.工時數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製造單號Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.製造單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製造單號Null()
            Me(Me.tabledtMelts.製造單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tabledtMelts.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存貨編號Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.存貨編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存貨編號Null()
            Me(Me.tabledtMelts.存貨編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名規格Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.品名規格Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名規格Null()
            Me(Me.tabledtMelts.品名規格Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單位Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.單位Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單位Null()
            Me(Me.tabledtMelts.單位Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is產出合計Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.產出合計Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set產出合計Null()
            Me(Me.tabledtMelts.產出合計Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is入料合計Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.入料合計Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set入料合計Null()
            Me(Me.tabledtMelts.入料合計Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製成率Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.製成率Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製成率Null()
            Me(Me.tabledtMelts.製成率Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is工時數Null() As Boolean
            Return Me.IsNull(Me.tabledtMelts.工時數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set工時數Null()
            Me(Me.tabledtMelts.工時數Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtTransportRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtTransport As dtTransportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtTransport = CType(Me.Table,dtTransportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 順序() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.順序Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '順序' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.順序Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 牧場名稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.牧場名稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '牧場名稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.牧場名稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 牧場代號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.牧場代號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '牧場代號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.牧場代號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 實際平均重() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.實際平均重Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '實際平均重' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.實際平均重Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 平均重() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.平均重Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '平均重' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.平均重Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 來源() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.來源Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '來源' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.來源Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 預抓羽數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.預抓羽數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '預抓羽數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.預抓羽數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 磅單羽數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.磅單羽數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '磅單羽數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.磅單羽數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 包裝數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.包裝數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '包裝數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.包裝數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 死亡數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.死亡數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '死亡數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.死亡數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 廢棄數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.廢棄數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '廢棄數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.廢棄數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製造單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.製造單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '製造單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.製造單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 車牌號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.車牌號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '車牌號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.車牌號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 公司會磅() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.公司會磅Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '公司會磅' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.公司會磅Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 磅單重() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.磅單重Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '磅單重' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.磅單重Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 磅差() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.磅差Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '磅差' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.磅差Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 備註() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.備註Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '備註' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.備註Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 特殊() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTransport.特殊Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtTransport' 中資料行 '特殊' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTransport.特殊Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tabledtTransport.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is順序Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.順序Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set順序Null()
            Me(Me.tabledtTransport.順序Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is牧場名稱Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.牧場名稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set牧場名稱Null()
            Me(Me.tabledtTransport.牧場名稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is牧場代號Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.牧場代號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set牧場代號Null()
            Me(Me.tabledtTransport.牧場代號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is實際平均重Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.實際平均重Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set實際平均重Null()
            Me(Me.tabledtTransport.實際平均重Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is平均重Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.平均重Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set平均重Null()
            Me(Me.tabledtTransport.平均重Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is來源Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.來源Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set來源Null()
            Me(Me.tabledtTransport.來源Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtTransport.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is預抓羽數Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.預抓羽數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set預抓羽數Null()
            Me(Me.tabledtTransport.預抓羽數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is磅單羽數Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.磅單羽數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set磅單羽數Null()
            Me(Me.tabledtTransport.磅單羽數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is包裝數Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.包裝數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set包裝數Null()
            Me(Me.tabledtTransport.包裝數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is死亡數Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.死亡數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set死亡數Null()
            Me(Me.tabledtTransport.死亡數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is廢棄數Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.廢棄數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set廢棄數Null()
            Me(Me.tabledtTransport.廢棄數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製造單號Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.製造單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製造單號Null()
            Me(Me.tabledtTransport.製造單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is車牌號Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.車牌號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set車牌號Null()
            Me(Me.tabledtTransport.車牌號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is公司會磅Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.公司會磅Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set公司會磅Null()
            Me(Me.tabledtTransport.公司會磅Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is磅單重Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.磅單重Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set磅單重Null()
            Me(Me.tabledtTransport.磅單重Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is磅差Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.磅差Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set磅差Null()
            Me(Me.tabledtTransport.磅差Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is備註Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.備註Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set備註Null()
            Me(Me.tabledtTransport.備註Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is特殊Null() As Boolean
            Return Me.IsNull(Me.tabledtTransport.特殊Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set特殊Null()
            Me(Me.tabledtTransport.特殊Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtFeedingRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtFeeding As dtFeedingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtFeeding = CType(Me.Table,dtFeedingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製造單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.製造單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '製造單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.製造單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存貨編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.存貨編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '存貨編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.存貨編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名規格() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.品名規格Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '品名規格' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.品名規格Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單位() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.單位Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '單位' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.單位Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 預產數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.預產數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '預產數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.預產數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 產出數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.產出數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '產出數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.產出數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製成率() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.製成率Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '製成率' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.製成率Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 工時數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.工時數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '工時數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.工時數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 領料數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFeeding.領料數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtFeeding' 中資料行 '領料數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFeeding.領料數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製造單號Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.製造單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製造單號Null()
            Me(Me.tabledtFeeding.製造單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tabledtFeeding.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存貨編號Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.存貨編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存貨編號Null()
            Me(Me.tabledtFeeding.存貨編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名規格Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.品名規格Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名規格Null()
            Me(Me.tabledtFeeding.品名規格Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單位Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.單位Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單位Null()
            Me(Me.tabledtFeeding.單位Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is預產數Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.預產數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set預產數Null()
            Me(Me.tabledtFeeding.預產數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is產出數Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.產出數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set產出數Null()
            Me(Me.tabledtFeeding.產出數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製成率Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.製成率Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製成率Null()
            Me(Me.tabledtFeeding.製成率Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is工時數Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.工時數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set工時數Null()
            Me(Me.tabledtFeeding.工時數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is領料數Null() As Boolean
            Return Me.IsNull(Me.tabledtFeeding.領料數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set領料數Null()
            Me(Me.tabledtFeeding.領料數Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtOutDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtOutDetail As dtOutDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtOutDetail = CType(Me.Table,dtOutDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutDetail.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutDetail' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutDetail.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutDetail.單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutDetail' 中資料行 '單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutDetail.單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutDetail.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutDetail' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutDetail.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutDetail.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutDetail' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutDetail.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 司機() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutDetail.司機Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutDetail' 中資料行 '司機' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutDetail.司機Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutDetail.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutDetail' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutDetail.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tabledtOutDetail.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tabledtOutDetail.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單號Null() As Boolean
            Return Me.IsNull(Me.tabledtOutDetail.單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單號Null()
            Me(Me.tabledtOutDetail.單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtOutDetail.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtOutDetail.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtOutDetail.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtOutDetail.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is司機Null() As Boolean
            Return Me.IsNull(Me.tabledtOutDetail.司機Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set司機Null()
            Me(Me.tabledtOutDetail.司機Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtOutDetail.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtOutDetail.數量Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtOutStatisticRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtOutStatistic As dtOutStatisticDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtOutStatistic = CType(Me.Table,dtOutStatisticDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutStatistic.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutStatistic' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutStatistic.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutStatistic.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutStatistic' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutStatistic.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 發出數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOutStatistic.發出數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtOutStatistic' 中資料行 '發出數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOutStatistic.發出數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtOutStatistic.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtOutStatistic.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtOutStatistic.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtOutStatistic.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is發出數量Null() As Boolean
            Return Me.IsNull(Me.tabledtOutStatistic.發出數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set發出數量Null()
            Me(Me.tabledtOutStatistic.發出數量Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtInDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtInDetail As dtInDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtInDetail = CType(Me.Table,dtInDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInDetail.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInDetail' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInDetail.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInDetail.單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInDetail' 中資料行 '單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInDetail.單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInDetail.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInDetail' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInDetail.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInDetail.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInDetail' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInDetail.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 司機() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInDetail.司機Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInDetail' 中資料行 '司機' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInDetail.司機Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInDetail.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInDetail' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInDetail.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 特殊獎金() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInDetail.特殊獎金Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInDetail' 中資料行 '特殊獎金' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInDetail.特殊獎金Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 說明() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInDetail.說明Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInDetail' 中資料行 '說明' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInDetail.說明Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tabledtInDetail.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tabledtInDetail.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單號Null() As Boolean
            Return Me.IsNull(Me.tabledtInDetail.單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單號Null()
            Me(Me.tabledtInDetail.單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtInDetail.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtInDetail.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtInDetail.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtInDetail.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is司機Null() As Boolean
            Return Me.IsNull(Me.tabledtInDetail.司機Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set司機Null()
            Me(Me.tabledtInDetail.司機Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtInDetail.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtInDetail.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is特殊獎金Null() As Boolean
            Return Me.IsNull(Me.tabledtInDetail.特殊獎金Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set特殊獎金Null()
            Me(Me.tabledtInDetail.特殊獎金Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is說明Null() As Boolean
            Return Me.IsNull(Me.tabledtInDetail.說明Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set說明Null()
            Me(Me.tabledtInDetail.說明Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtInStatisticRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtInStatistic As dtInStatisticDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtInStatistic = CType(Me.Table,dtInStatisticDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInStatistic.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInStatistic' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInStatistic.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInStatistic.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInStatistic' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInStatistic.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 司機() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInStatistic.司機Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInStatistic' 中資料行 '司機' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInStatistic.司機Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInStatistic.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtInStatistic' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInStatistic.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtInStatistic.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtInStatistic.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtInStatistic.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtInStatistic.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is司機Null() As Boolean
            Return Me.IsNull(Me.tabledtInStatistic.司機Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set司機Null()
            Me(Me.tabledtInStatistic.司機Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtInStatistic.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtInStatistic.數量Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtAdjustDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtAdjustDetail As dtAdjustDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtAdjustDetail = CType(Me.Table,dtAdjustDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustDetail.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustDetail' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustDetail.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustDetail.單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustDetail' 中資料行 '單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustDetail.單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustDetail.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustDetail' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustDetail.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustDetail.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustDetail' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustDetail.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 增減() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustDetail.增減Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustDetail' 中資料行 '增減' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustDetail.增減Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustDetail.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustDetail' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustDetail.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 說明() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustDetail.說明Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustDetail' 中資料行 '說明' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustDetail.說明Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustDetail.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tabledtAdjustDetail.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單號Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustDetail.單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單號Null()
            Me(Me.tabledtAdjustDetail.單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustDetail.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtAdjustDetail.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustDetail.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtAdjustDetail.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is增減Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustDetail.增減Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set增減Null()
            Me(Me.tabledtAdjustDetail.增減Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustDetail.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtAdjustDetail.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is說明Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustDetail.說明Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set說明Null()
            Me(Me.tabledtAdjustDetail.說明Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtAdjustStatisticRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtAdjustStatistic As dtAdjustStatisticDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtAdjustStatistic = CType(Me.Table,dtAdjustStatisticDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustStatistic.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustStatistic' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustStatistic.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustStatistic.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustStatistic' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustStatistic.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 增加() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustStatistic.增加Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustStatistic' 中資料行 '增加' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustStatistic.增加Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 減少() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustStatistic.減少Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustStatistic' 中資料行 '減少' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustStatistic.減少Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 調整合計() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtAdjustStatistic.調整合計Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtAdjustStatistic' 中資料行 '調整合計' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtAdjustStatistic.調整合計Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustStatistic.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtAdjustStatistic.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustStatistic.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtAdjustStatistic.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is增加Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustStatistic.增加Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set增加Null()
            Me(Me.tabledtAdjustStatistic.增加Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is減少Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustStatistic.減少Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set減少Null()
            Me(Me.tabledtAdjustStatistic.減少Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is調整合計Null() As Boolean
            Return Me.IsNull(Me.tabledtAdjustStatistic.調整合計Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set調整合計Null()
            Me(Me.tabledtAdjustStatistic.調整合計Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCarDrDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtCarDrDetail As dtCarDrDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCarDrDetail = CType(Me.Table,dtCarDrDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrDetail.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrDetail' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrDetail.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrDetail.單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrDetail' 中資料行 '單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrDetail.單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrDetail.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrDetail' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrDetail.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrDetail.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrDetail' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrDetail.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 司機() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrDetail.司機Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrDetail' 中資料行 '司機' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrDetail.司機Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrDetail.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrDetail' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrDetail.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 特殊獎金() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrDetail.特殊獎金Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrDetail' 中資料行 '特殊獎金' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrDetail.特殊獎金Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 說明() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrDetail.說明Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrDetail' 中資料行 '說明' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrDetail.說明Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrDetail.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tabledtCarDrDetail.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單號Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrDetail.單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單號Null()
            Me(Me.tabledtCarDrDetail.單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrDetail.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtCarDrDetail.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrDetail.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtCarDrDetail.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is司機Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrDetail.司機Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set司機Null()
            Me(Me.tabledtCarDrDetail.司機Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrDetail.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtCarDrDetail.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is特殊獎金Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrDetail.特殊獎金Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set特殊獎金Null()
            Me(Me.tabledtCarDrDetail.特殊獎金Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is說明Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrDetail.說明Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set說明Null()
            Me(Me.tabledtCarDrDetail.說明Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCarDrStatisticRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtCarDrStatistic As dtCarDrStatisticDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCarDrStatistic = CType(Me.Table,dtCarDrStatisticDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 司機() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrStatistic.司機Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrStatistic' 中資料行 '司機' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrStatistic.司機Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrStatistic.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrStatistic' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrStatistic.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrStatistic.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrStatistic' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrStatistic.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCarDrStatistic.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCarDrStatistic' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCarDrStatistic.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is司機Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrStatistic.司機Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set司機Null()
            Me(Me.tabledtCarDrStatistic.司機Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrStatistic.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtCarDrStatistic.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrStatistic.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtCarDrStatistic.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtCarDrStatistic.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtCarDrStatistic.數量Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtEBStatisticRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtEBStatistic As dtEBStatisticDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtEBStatistic = CType(Me.Table,dtEBStatisticDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtEBStatistic.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtEBStatistic' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtEBStatistic.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtEBStatistic.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtEBStatistic' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtEBStatistic.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 期初數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtEBStatistic.期初數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtEBStatistic' 中資料行 '期初數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtEBStatistic.期初數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 發出數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtEBStatistic.發出數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtEBStatistic' 中資料行 '發出數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtEBStatistic.發出數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 回收數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtEBStatistic.回收數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtEBStatistic' 中資料行 '回收數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtEBStatistic.回收數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 調加數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtEBStatistic.調加數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtEBStatistic' 中資料行 '調加數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtEBStatistic.調加數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 調減數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtEBStatistic.調減數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtEBStatistic' 中資料行 '調減數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtEBStatistic.調減數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 餘數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtEBStatistic.餘數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtEBStatistic' 中資料行 '餘數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtEBStatistic.餘數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tabledtEBStatistic.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tabledtEBStatistic.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tabledtEBStatistic.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tabledtEBStatistic.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is期初數量Null() As Boolean
            Return Me.IsNull(Me.tabledtEBStatistic.期初數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set期初數量Null()
            Me(Me.tabledtEBStatistic.期初數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is發出數量Null() As Boolean
            Return Me.IsNull(Me.tabledtEBStatistic.發出數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set發出數量Null()
            Me(Me.tabledtEBStatistic.發出數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is回收數量Null() As Boolean
            Return Me.IsNull(Me.tabledtEBStatistic.回收數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set回收數量Null()
            Me(Me.tabledtEBStatistic.回收數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is調加數量Null() As Boolean
            Return Me.IsNull(Me.tabledtEBStatistic.調加數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set調加數量Null()
            Me(Me.tabledtEBStatistic.調加數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is調減數量Null() As Boolean
            Return Me.IsNull(Me.tabledtEBStatistic.調減數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set調減數量Null()
            Me(Me.tabledtEBStatistic.調減數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is餘數Null() As Boolean
            Return Me.IsNull(Me.tabledtEBStatistic.餘數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set餘數Null()
            Me(Me.tabledtEBStatistic.餘數Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EBStatementRow
        Inherits Global.System.Data.DataRow
        
        Private tableEBStatement As EBStatementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEBStatement = CType(Me.Table,EBStatementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶編號() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.客戶編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '客戶編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.客戶編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶簡稱() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.客戶簡稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '客戶簡稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.客戶簡稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 前期餘數() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.前期餘數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '前期餘數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.前期餘數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 發出數量() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.發出數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '發出數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.發出數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 回收數量() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.回收數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '回收數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.回收數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 調加數量() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.調加數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '調加數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.調加數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 調減數量() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.調減數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '調減數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.調減數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 本日餘數() As String
            Get
                Try 
                    Return CType(Me(Me.tableEBStatement.本日餘數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'EBStatement' 中資料行 '本日餘數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableEBStatement.本日餘數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶編號Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.客戶編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶編號Null()
            Me(Me.tableEBStatement.客戶編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶簡稱Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.客戶簡稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶簡稱Null()
            Me(Me.tableEBStatement.客戶簡稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tableEBStatement.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is前期餘數Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.前期餘數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set前期餘數Null()
            Me(Me.tableEBStatement.前期餘數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is發出數量Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.發出數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set發出數量Null()
            Me(Me.tableEBStatement.發出數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is回收數量Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.回收數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set回收數量Null()
            Me(Me.tableEBStatement.回收數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is調加數量Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.調加數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set調加數量Null()
            Me(Me.tableEBStatement.調加數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is調減數量Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.調減數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set調減數量Null()
            Me(Me.tableEBStatement.調減數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is本日餘數Null() As Boolean
            Return Me.IsNull(Me.tableEBStatement.本日餘數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set本日餘數Null()
            Me(Me.tableEBStatement.本日餘數Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCSDGV1Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtCSDGV1 As dtCSDGV1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCSDGV1 = CType(Me.Table,dtCSDGV1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 過帳日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV1.過帳日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV1' 中資料行 '過帳日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV1.過帳日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 代碼() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV1.代碼Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV1' 中資料行 '代碼' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV1.代碼Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV1.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV1' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV1.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV1.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV1' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV1.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單價() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV1.單價Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV1' 中資料行 '單價' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV1.單價Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 金額() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV1.金額Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV1' 中資料行 '金額' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV1.金額Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is過帳日期Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV1.過帳日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set過帳日期Null()
            Me(Me.tabledtCSDGV1.過帳日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is代碼Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV1.代碼Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set代碼Null()
            Me(Me.tabledtCSDGV1.代碼Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV1.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtCSDGV1.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV1.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtCSDGV1.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單價Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV1.單價Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單價Null()
            Me(Me.tabledtCSDGV1.單價Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is金額Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV1.金額Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set金額Null()
            Me(Me.tabledtCSDGV1.金額Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCSDGV5Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtCSDGV5 As dtCSDGV5DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCSDGV5 = CType(Me.Table,dtCSDGV5DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 過帳日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV5.過帳日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV5' 中資料行 '過帳日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV5.過帳日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 代碼() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV5.代碼Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV5' 中資料行 '代碼' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV5.代碼Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV5.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV5' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV5.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV5.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV5' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV5.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單價() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV5.單價Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV5' 中資料行 '單價' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV5.單價Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 金額() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV5.金額Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV5' 中資料行 '金額' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV5.金額Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is過帳日期Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV5.過帳日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set過帳日期Null()
            Me(Me.tabledtCSDGV5.過帳日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is代碼Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV5.代碼Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set代碼Null()
            Me(Me.tabledtCSDGV5.代碼Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV5.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtCSDGV5.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV5.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtCSDGV5.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單價Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV5.單價Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單價Null()
            Me(Me.tabledtCSDGV5.單價Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is金額Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV5.金額Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set金額Null()
            Me(Me.tabledtCSDGV5.金額Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCSDGV2Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtCSDGV2 As dtCSDGV2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCSDGV2 = CType(Me.Table,dtCSDGV2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 過帳日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV2.過帳日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV2' 中資料行 '過帳日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV2.過帳日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 代碼() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV2.代碼Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV2' 中資料行 '代碼' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV2.代碼Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV2.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV2' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV2.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV2.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV2' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV2.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單價() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV2.單價Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV2' 中資料行 '單價' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV2.單價Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 金額() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV2.金額Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV2' 中資料行 '金額' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV2.金額Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is過帳日期Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV2.過帳日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set過帳日期Null()
            Me(Me.tabledtCSDGV2.過帳日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is代碼Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV2.代碼Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set代碼Null()
            Me(Me.tabledtCSDGV2.代碼Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV2.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtCSDGV2.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV2.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtCSDGV2.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單價Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV2.單價Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單價Null()
            Me(Me.tabledtCSDGV2.單價Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is金額Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV2.金額Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set金額Null()
            Me(Me.tabledtCSDGV2.金額Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCSDGV3Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtCSDGV3 As dtCSDGV3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCSDGV3 = CType(Me.Table,dtCSDGV3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 過帳日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV3.過帳日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV3' 中資料行 '過帳日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV3.過帳日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 代碼() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV3.代碼Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV3' 中資料行 '代碼' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV3.代碼Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV3.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV3' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV3.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 隻數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV3.隻數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV3' 中資料行 '隻數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV3.隻數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單價() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV3.單價Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV3' 中資料行 '單價' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV3.單價Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 金額() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV3.金額Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV3' 中資料行 '金額' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV3.金額Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 毛重() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV3.毛重Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV3' 中資料行 '毛重' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV3.毛重Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is過帳日期Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV3.過帳日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set過帳日期Null()
            Me(Me.tabledtCSDGV3.過帳日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is代碼Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV3.代碼Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set代碼Null()
            Me(Me.tabledtCSDGV3.代碼Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV3.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtCSDGV3.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is隻數Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV3.隻數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set隻數Null()
            Me(Me.tabledtCSDGV3.隻數Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單價Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV3.單價Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單價Null()
            Me(Me.tabledtCSDGV3.單價Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is金額Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV3.金額Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set金額Null()
            Me(Me.tabledtCSDGV3.金額Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is毛重Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV3.毛重Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set毛重Null()
            Me(Me.tabledtCSDGV3.毛重Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCSDGV4Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtCSDGV4 As dtCSDGV4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCSDGV4 = CType(Me.Table,dtCSDGV4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 過帳日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV4.過帳日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV4' 中資料行 '過帳日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV4.過帳日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 代碼() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV4.代碼Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV4' 中資料行 '代碼' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV4.代碼Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV4.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV4' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV4.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV4.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV4' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV4.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單價() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV4.單價Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV4' 中資料行 '單價' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV4.單價Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 金額() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCSDGV4.金額Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtCSDGV4' 中資料行 '金額' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCSDGV4.金額Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is過帳日期Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV4.過帳日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set過帳日期Null()
            Me(Me.tabledtCSDGV4.過帳日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is代碼Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV4.代碼Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set代碼Null()
            Me(Me.tabledtCSDGV4.代碼Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV4.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtCSDGV4.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV4.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtCSDGV4.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單價Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV4.單價Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單價Null()
            Me(Me.tabledtCSDGV4.單價Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is金額Null() As Boolean
            Return Me.IsNull(Me.tabledtCSDGV4.金額Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set金額Null()
            Me(Me.tabledtCSDGV4.金額Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPayment1Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtPayment1 As dtPayment1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPayment1 = CType(Me.Table,dtPayment1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 文件單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.文件單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '文件單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.文件單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 驗收單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.驗收單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '驗收單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.驗收單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 到期日() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.到期日Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '到期日' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.到期日Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存編() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.存編Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '存編' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.存編Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名規格() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.品名規格Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '品名規格' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.品名規格Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單位() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.單位Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '單位' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.單位Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單價() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.單價Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '單價' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.單價Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 稅額() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.稅額Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '稅額' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.稅額Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 小計() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.小計Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '小計' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.小計Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 運費() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.運費Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '運費' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.運費Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 最近購價() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.最近購價Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '最近購價' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.最近購價Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 利潤中心() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.利潤中心Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '利潤中心' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.利潤中心Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 付款方式() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.付款方式Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '付款方式' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.付款方式Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 備註() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment1.備註Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment1' 中資料行 '備註' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment1.備註Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is文件單號Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.文件單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set文件單號Null()
            Me(Me.tabledtPayment1.文件單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is日期Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set日期Null()
            Me(Me.tabledtPayment1.日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is驗收單號Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.驗收單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set驗收單號Null()
            Me(Me.tabledtPayment1.驗收單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is到期日Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.到期日Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set到期日Null()
            Me(Me.tabledtPayment1.到期日Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存編Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.存編Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存編Null()
            Me(Me.tabledtPayment1.存編Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名規格Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.品名規格Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名規格Null()
            Me(Me.tabledtPayment1.品名規格Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtPayment1.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單位Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.單位Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單位Null()
            Me(Me.tabledtPayment1.單位Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單價Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.單價Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單價Null()
            Me(Me.tabledtPayment1.單價Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is稅額Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.稅額Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set稅額Null()
            Me(Me.tabledtPayment1.稅額Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is小計Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.小計Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set小計Null()
            Me(Me.tabledtPayment1.小計Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is運費Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.運費Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set運費Null()
            Me(Me.tabledtPayment1.運費Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is最近購價Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.最近購價Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set最近購價Null()
            Me(Me.tabledtPayment1.最近購價Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is利潤中心Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.利潤中心Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set利潤中心Null()
            Me(Me.tabledtPayment1.利潤中心Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is付款方式Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.付款方式Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set付款方式Null()
            Me(Me.tabledtPayment1.付款方式Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is備註Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment1.備註Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set備註Null()
            Me(Me.tabledtPayment1.備註Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPayment2Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtPayment2 As dtPayment2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPayment2 = CType(Me.Table,dtPayment2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 文件單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment2.文件單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment2' 中資料行 '文件單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment2.文件單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 預付款() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment2.預付款Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment2' 中資料行 '預付款' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment2.預付款Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is文件單號Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment2.文件單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set文件單號Null()
            Me(Me.tabledtPayment2.文件單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is預付款Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment2.預付款Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set預付款Null()
            Me(Me.tabledtPayment2.預付款Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPayment3Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtPayment3 As dtPayment3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPayment3 = CType(Me.Table,dtPayment3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 文件單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment3.文件單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment3' 中資料行 '文件單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment3.文件單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 運費() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment3.運費Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment3' 中資料行 '運費' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment3.運費Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 毛雞金額() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPayment3.毛雞金額Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtPayment3' 中資料行 '毛雞金額' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPayment3.毛雞金額Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is文件單號Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment3.文件單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set文件單號Null()
            Me(Me.tabledtPayment3.文件單號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is運費Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment3.運費Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set運費Null()
            Me(Me.tabledtPayment3.運費Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is毛雞金額Null() As Boolean
            Return Me.IsNull(Me.tabledtPayment3.毛雞金額Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set毛雞金額Null()
            Me(Me.tabledtPayment3.毛雞金額Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtSchedulingRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtScheduling As dtSchedulingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtScheduling = CType(Me.Table,dtSchedulingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 列號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtScheduling.列號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtScheduling' 中資料行 '列號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtScheduling.列號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製單() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtScheduling.製單Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtScheduling' 中資料行 '製單' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtScheduling.製單Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 客戶() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtScheduling.客戶Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtScheduling' 中資料行 '客戶' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtScheduling.客戶Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtScheduling.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtScheduling' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtScheduling.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtScheduling.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtScheduling' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtScheduling.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 人數() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtScheduling.人數Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtScheduling' 中資料行 '人數' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtScheduling.人數Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is列號Null() As Boolean
            Return Me.IsNull(Me.tabledtScheduling.列號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set列號Null()
            Me(Me.tabledtScheduling.列號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製單Null() As Boolean
            Return Me.IsNull(Me.tabledtScheduling.製單Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製單Null()
            Me(Me.tabledtScheduling.製單Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is客戶Null() As Boolean
            Return Me.IsNull(Me.tabledtScheduling.客戶Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set客戶Null()
            Me(Me.tabledtScheduling.客戶Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtScheduling.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtScheduling.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtScheduling.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtScheduling.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is人數Null() As Boolean
            Return Me.IsNull(Me.tabledtScheduling.人數Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set人數Null()
            Me(Me.tabledtScheduling.人數Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtSPickingRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtSPicking As dtSPickingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtSPicking = CType(Me.Table,dtSPickingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 對應() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking.對應Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking' 中資料行 '對應' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking.對應Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存編() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking.存編Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking' 中資料行 '存編' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking.存編Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is對應Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking.對應Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set對應Null()
            Me(Me.tabledtSPicking.對應Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存編Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking.存編Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存編Null()
            Me(Me.tabledtSPicking.存編Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtSPicking.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtSPicking.數量Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtSPicking1Row
        Inherits Global.System.Data.DataRow
        
        Private tabledtSPicking1 As dtSPicking1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtSPicking1 = CType(Me.Table,dtSPicking1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製單() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1.製單Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '製單' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1.製單Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存編() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1.存編Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '存編' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1.存編Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 總數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1.總數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '總數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1.總數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0000() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0000Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0000' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0030() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0030Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0030' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0030Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0100() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0100Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0100' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0100Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0130() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0130Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0130' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0130Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0200() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0200Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0200' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0200Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0230() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0230Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0230' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0230Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0300() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0300Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0300' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0300Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0330() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0330Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0330' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0330Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0400() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0400Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0400' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0400Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0430() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0430Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0430' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0430Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0500() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0500Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0500' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0500Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0530() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0530Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0530' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0530Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0600() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0600Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0600' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0600Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0630() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0630Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0630' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0630Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0700() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0700Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0700' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0700Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0730() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0730Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0730' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0730Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0800() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0800Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0800' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0800Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0830() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0830Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0830' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0830Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0900() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0900Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0900' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0900Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0930() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._0930Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '0930' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._0930Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1000() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1000Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1000' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1030() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1030Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1030' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1030Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1100() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1100Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1100' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1100Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1130() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1130Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1130' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1130Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1200() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1200Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1200' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1200Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1230() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1230Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1230' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1230Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1300() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1300Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1300' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1300Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1330() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1330Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1330' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1330Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1400() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1400Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1400' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1400Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1430() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1430Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1430' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1430Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1500() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1500Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1500' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1500Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1530() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1530Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1530' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1530Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1600() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1600Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1600' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1600Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1630() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1630Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1630' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1630Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1700() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1700Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1700' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1700Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1730() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1730Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1730' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1730Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1800() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1800Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1800' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1800Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1830() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1830Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1830' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1830Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1900() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1900Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1900' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1900Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1930() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._1930Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '1930' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._1930Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2000() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._2000Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '2000' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._2000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2030() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._2030Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '2030' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._2030Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2100() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._2100Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '2100' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._2100Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2130() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._2130Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '2130' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._2130Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2200() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._2200Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '2200' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._2200Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2230() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._2230Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '2230' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._2230Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2300() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._2300Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '2300' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._2300Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2330() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSPicking1._2330Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtSPicking1' 中資料行 '2330' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSPicking1._2330Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製單Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1.製單Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製單Null()
            Me(Me.tabledtSPicking1.製單Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存編Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1.存編Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存編Null()
            Me(Me.tabledtSPicking1.存編Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtSPicking1.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is總數量Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1.總數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set總數量Null()
            Me(Me.tabledtSPicking1.總數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0000Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0000Null()
            Me(Me.tabledtSPicking1._0000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0030Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0030Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0030Null()
            Me(Me.tabledtSPicking1._0030Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0100Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0100Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0100Null()
            Me(Me.tabledtSPicking1._0100Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0130Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0130Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0130Null()
            Me(Me.tabledtSPicking1._0130Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0200Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0200Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0200Null()
            Me(Me.tabledtSPicking1._0200Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0230Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0230Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0230Null()
            Me(Me.tabledtSPicking1._0230Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0300Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0300Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0300Null()
            Me(Me.tabledtSPicking1._0300Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0330Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0330Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0330Null()
            Me(Me.tabledtSPicking1._0330Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0400Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0400Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0400Null()
            Me(Me.tabledtSPicking1._0400Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0430Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0430Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0430Null()
            Me(Me.tabledtSPicking1._0430Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0500Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0500Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0500Null()
            Me(Me.tabledtSPicking1._0500Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0530Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0530Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0530Null()
            Me(Me.tabledtSPicking1._0530Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0600Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0600Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0600Null()
            Me(Me.tabledtSPicking1._0600Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0630Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0630Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0630Null()
            Me(Me.tabledtSPicking1._0630Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0700Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0700Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0700Null()
            Me(Me.tabledtSPicking1._0700Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0730Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0730Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0730Null()
            Me(Me.tabledtSPicking1._0730Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0800Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0800Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0800Null()
            Me(Me.tabledtSPicking1._0800Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0830Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0830Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0830Null()
            Me(Me.tabledtSPicking1._0830Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0900Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0900Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0900Null()
            Me(Me.tabledtSPicking1._0900Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0930Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._0930Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0930Null()
            Me(Me.tabledtSPicking1._0930Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1000Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1000Null()
            Me(Me.tabledtSPicking1._1000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1030Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1030Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1030Null()
            Me(Me.tabledtSPicking1._1030Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1100Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1100Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1100Null()
            Me(Me.tabledtSPicking1._1100Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1130Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1130Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1130Null()
            Me(Me.tabledtSPicking1._1130Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1200Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1200Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1200Null()
            Me(Me.tabledtSPicking1._1200Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1230Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1230Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1230Null()
            Me(Me.tabledtSPicking1._1230Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1300Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1300Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1300Null()
            Me(Me.tabledtSPicking1._1300Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1330Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1330Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1330Null()
            Me(Me.tabledtSPicking1._1330Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1400Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1400Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1400Null()
            Me(Me.tabledtSPicking1._1400Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1430Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1430Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1430Null()
            Me(Me.tabledtSPicking1._1430Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1500Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1500Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1500Null()
            Me(Me.tabledtSPicking1._1500Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1530Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1530Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1530Null()
            Me(Me.tabledtSPicking1._1530Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1600Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1600Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1600Null()
            Me(Me.tabledtSPicking1._1600Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1630Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1630Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1630Null()
            Me(Me.tabledtSPicking1._1630Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1700Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1700Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1700Null()
            Me(Me.tabledtSPicking1._1700Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1730Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1730Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1730Null()
            Me(Me.tabledtSPicking1._1730Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1800Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1800Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1800Null()
            Me(Me.tabledtSPicking1._1800Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1830Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1830Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1830Null()
            Me(Me.tabledtSPicking1._1830Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1900Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1900Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1900Null()
            Me(Me.tabledtSPicking1._1900Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1930Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._1930Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1930Null()
            Me(Me.tabledtSPicking1._1930Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2000Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._2000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2000Null()
            Me(Me.tabledtSPicking1._2000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2030Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._2030Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2030Null()
            Me(Me.tabledtSPicking1._2030Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2100Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._2100Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2100Null()
            Me(Me.tabledtSPicking1._2100Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2130Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._2130Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2130Null()
            Me(Me.tabledtSPicking1._2130Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2200Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._2200Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2200Null()
            Me(Me.tabledtSPicking1._2200Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2230Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._2230Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2230Null()
            Me(Me.tabledtSPicking1._2230Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2300Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._2300Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2300Null()
            Me(Me.tabledtSPicking1._2300Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2330Null() As Boolean
            Return Me.IsNull(Me.tabledtSPicking1._2330Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2330Null()
            Me(Me.tabledtSPicking1._2330Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtDispatchingRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtDispatching As dtDispatchingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtDispatching = CType(Me.Table,dtDispatchingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 區別() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDispatching.區別Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtDispatching' 中資料行 '區別' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDispatching.區別Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製單() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDispatching.製單Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtDispatching' 中資料行 '製單' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDispatching.製單Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存編() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDispatching.存編Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtDispatching' 中資料行 '存編' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDispatching.存編Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDispatching.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtDispatching' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDispatching.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDispatching.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtDispatching' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDispatching.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDispatching.單號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dtDispatching' 中資料行 '單號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDispatching.單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is區別Null() As Boolean
            Return Me.IsNull(Me.tabledtDispatching.區別Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set區別Null()
            Me(Me.tabledtDispatching.區別Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製單Null() As Boolean
            Return Me.IsNull(Me.tabledtDispatching.製單Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製單Null()
            Me(Me.tabledtDispatching.製單Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存編Null() As Boolean
            Return Me.IsNull(Me.tabledtDispatching.存編Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存編Null()
            Me(Me.tabledtDispatching.存編Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledtDispatching.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledtDispatching.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledtDispatching.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledtDispatching.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單號Null() As Boolean
            Return Me.IsNull(Me.tabledtDispatching.單號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單號Null()
            Me(Me.tabledtDispatching.單號Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_KS_Z_StockApply_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_KS_Z_StockApply_Detail As dt_KS_Z_StockApply_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_KS_Z_StockApply_Detail = CType(Me.Table,dt_KS_Z_StockApply_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_StockApply_Detail.ProCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_StockApply_Detail' 中資料行 'ProCode' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_StockApply_Detail.ProCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_StockApply_Detail.ProNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_StockApply_Detail' 中資料行 'ProName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_StockApply_Detail.ProNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Num() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_StockApply_Detail.NumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_StockApply_Detail' 中資料行 'Num' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_StockApply_Detail.NumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FldValue() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_StockApply_Detail.FldValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_StockApply_Detail' 中資料行 'FldValue' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_StockApply_Detail.FldValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEMO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_StockApply_Detail.MEMOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_StockApply_Detail' 中資料行 'MEMO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_StockApply_Detail.MEMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FldName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_StockApply_Detail.FldNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_StockApply_Detail' 中資料行 'FldName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_StockApply_Detail.FldNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FrgnName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_StockApply_Detail.FrgnNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_StockApply_Detail' 中資料行 'FrgnName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_StockApply_Detail.FrgnNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProCodeNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_StockApply_Detail.ProCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProCodeNull()
            Me(Me.tabledt_KS_Z_StockApply_Detail.ProCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProNameNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_StockApply_Detail.ProNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProNameNull()
            Me(Me.tabledt_KS_Z_StockApply_Detail.ProNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_StockApply_Detail.NumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumNull()
            Me(Me.tabledt_KS_Z_StockApply_Detail.NumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFldValueNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_StockApply_Detail.FldValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFldValueNull()
            Me(Me.tabledt_KS_Z_StockApply_Detail.FldValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEMONull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_StockApply_Detail.MEMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEMONull()
            Me(Me.tabledt_KS_Z_StockApply_Detail.MEMOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFldNameNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_StockApply_Detail.FldNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFldNameNull()
            Me(Me.tabledt_KS_Z_StockApply_Detail.FldNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFrgnNameNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_StockApply_Detail.FrgnNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFrgnNameNull()
            Me(Me.tabledt_KS_Z_StockApply_Detail.FrgnNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_KS_Z_WelfareRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_KS_Z_Welfare As dt_KS_Z_WelfareDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_KS_Z_Welfare = CType(Me.Table,dt_KS_Z_WelfareDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存編() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_Welfare.存編Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_Welfare' 中資料行 '存編' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_Welfare.存編Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_Welfare.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_Welfare' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_Welfare.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 條碼() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_Welfare.條碼Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_Welfare' 中資料行 '條碼' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_Welfare.條碼Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_Welfare.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_Welfare' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_Welfare.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 重量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_Welfare.重量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_Welfare' 中資料行 '重量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_Welfare.重量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 員工姓名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_Welfare.員工姓名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_Welfare' 中資料行 '員工姓名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_Welfare.員工姓名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 員工編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_Z_Welfare.員工編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_Z_Welfare' 中資料行 '員工編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_Z_Welfare.員工編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存編Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_Welfare.存編Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存編Null()
            Me(Me.tabledt_KS_Z_Welfare.存編Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_Welfare.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledt_KS_Z_Welfare.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is條碼Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_Welfare.條碼Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set條碼Null()
            Me(Me.tabledt_KS_Z_Welfare.條碼Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_Welfare.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledt_KS_Z_Welfare.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is重量Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_Welfare.重量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set重量Null()
            Me(Me.tabledt_KS_Z_Welfare.重量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is員工姓名Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_Welfare.員工姓名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set員工姓名Null()
            Me(Me.tabledt_KS_Z_Welfare.員工姓名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is員工編號Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_Z_Welfare.員工編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set員工編號Null()
            Me(Me.tabledt_KS_Z_Welfare.員工編號Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_KS_A_EC_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_KS_A_EC_Detail As dt_KS_A_EC_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_KS_A_EC_Detail = CType(Me.Table,dt_KS_A_EC_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_A_EC_Detail.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_A_EC_Detail' 中資料行 'ItemCode' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_A_EC_Detail.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dscription() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_A_EC_Detail.DscriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_A_EC_Detail' 中資料行 'Dscription' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_A_EC_Detail.DscriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtttibuteType() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_A_EC_Detail.AtttibuteTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_A_EC_Detail' 中資料行 'AtttibuteType' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_A_EC_Detail.AtttibuteTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 本次數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_A_EC_Detail.本次數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_A_EC_Detail' 中資料行 '本次數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_A_EC_Detail.本次數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_A_EC_Detail.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tabledt_KS_A_EC_Detail.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDscriptionNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_A_EC_Detail.DscriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDscriptionNull()
            Me(Me.tabledt_KS_A_EC_Detail.DscriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtttibuteTypeNull() As Boolean
            Return Me.IsNull(Me.tabledt_KS_A_EC_Detail.AtttibuteTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtttibuteTypeNull()
            Me(Me.tabledt_KS_A_EC_Detail.AtttibuteTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is本次數量Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_A_EC_Detail.本次數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set本次數量Null()
            Me(Me.tabledt_KS_A_EC_Detail.本次數量Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_KS_A_ECOrder_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_KS_A_ECOrder_Detail As dt_KS_A_ECOrder_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_KS_A_ECOrder_Detail = CType(Me.Table,dt_KS_A_ECOrder_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 通路商品型號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_A_ECOrder_Detail.通路商品型號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_A_ECOrder_Detail' 中資料行 '通路商品型號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_A_ECOrder_Detail.通路商品型號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 通路商品名稱() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_A_ECOrder_Detail.通路商品名稱Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_A_ECOrder_Detail' 中資料行 '通路商品名稱' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_A_ECOrder_Detail.通路商品名稱Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_KS_A_ECOrder_Detail.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_KS_A_ECOrder_Detail' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_KS_A_ECOrder_Detail.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is通路商品型號Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_A_ECOrder_Detail.通路商品型號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set通路商品型號Null()
            Me(Me.tabledt_KS_A_ECOrder_Detail.通路商品型號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is通路商品名稱Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_A_ECOrder_Detail.通路商品名稱Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set通路商品名稱Null()
            Me(Me.tabledt_KS_A_ECOrder_Detail.通路商品名稱Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledt_KS_A_ECOrder_Detail.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledt_KS_A_ECOrder_Detail.數量Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_加工原料肉領料單Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_加工原料肉領料單 As dt_加工原料肉領料單DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_加工原料肉領料單 = CType(Me.Table,dt_加工原料肉領料單DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 草稿單號() As Integer
            Get
                Return CType(Me(Me.tabledt_加工原料肉領料單.草稿單號Column),Integer)
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.草稿單號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製單編號() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.製單編號Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '製單編號' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.製單編號Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 備註() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.備註Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '備註' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.備註Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 過帳日期() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.過帳日期Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '過帳日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.過帳日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 文件日期() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.文件日期Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '文件日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.文件日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存編() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.存編Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '存編' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.存編Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.數量Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 單位() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.單位Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '單位' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.單位Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.數量2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '數量2' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.數量2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 小單位() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.小單位Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '小單位' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.小單位Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 合計() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledt_加工原料肉領料單.合計Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_加工原料肉領料單' 中資料行 '合計' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_加工原料肉領料單.合計Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製單編號Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.製單編號Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製單編號Null()
            Me(Me.tabledt_加工原料肉領料單.製單編號Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is備註Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.備註Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set備註Null()
            Me(Me.tabledt_加工原料肉領料單.備註Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is過帳日期Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.過帳日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set過帳日期Null()
            Me(Me.tabledt_加工原料肉領料單.過帳日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is文件日期Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.文件日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set文件日期Null()
            Me(Me.tabledt_加工原料肉領料單.文件日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存編Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.存編Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存編Null()
            Me(Me.tabledt_加工原料肉領料單.存編Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledt_加工原料肉領料單.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledt_加工原料肉領料單.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is單位Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.單位Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set單位Null()
            Me(Me.tabledt_加工原料肉領料單.單位Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量2Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.數量2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量2Null()
            Me(Me.tabledt_加工原料肉領料單.數量2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is小單位Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.小單位Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set小單位Null()
            Me(Me.tabledt_加工原料肉領料單.小單位Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is合計Null() As Boolean
            Return Me.IsNull(Me.tabledt_加工原料肉領料單.合計Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set合計Null()
            Me(Me.tabledt_加工原料肉領料單.合計Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_冷藏貨庫存表Row
        Inherits Global.System.Data.DataRow
        
        Private tabledt_冷藏貨庫存表 As dt_冷藏貨庫存表DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_冷藏貨庫存表 = CType(Me.Table,dt_冷藏貨庫存表DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 存編() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_冷藏貨庫存表.存編Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_冷藏貨庫存表' 中資料行 '存編' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_冷藏貨庫存表.存編Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 品名() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_冷藏貨庫存表.品名Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_冷藏貨庫存表' 中資料行 '品名' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_冷藏貨庫存表.品名Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 總數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_冷藏貨庫存表.總數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_冷藏貨庫存表' 中資料行 '總數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_冷藏貨庫存表.總數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_冷藏貨庫存表.數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_冷藏貨庫存表' 中資料行 '數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_冷藏貨庫存表.數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 製造日期() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_冷藏貨庫存表.製造日期Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_冷藏貨庫存表' 中資料行 '製造日期' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_冷藏貨庫存表.製造日期Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property 未入庫數量() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_冷藏貨庫存表.未入庫數量Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'dt_冷藏貨庫存表' 中資料行 '未入庫數量' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_冷藏貨庫存表.未入庫數量Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is存編Null() As Boolean
            Return Me.IsNull(Me.tabledt_冷藏貨庫存表.存編Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set存編Null()
            Me(Me.tabledt_冷藏貨庫存表.存編Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is品名Null() As Boolean
            Return Me.IsNull(Me.tabledt_冷藏貨庫存表.品名Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set品名Null()
            Me(Me.tabledt_冷藏貨庫存表.品名Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is總數量Null() As Boolean
            Return Me.IsNull(Me.tabledt_冷藏貨庫存表.總數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set總數量Null()
            Me(Me.tabledt_冷藏貨庫存表.總數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is數量Null() As Boolean
            Return Me.IsNull(Me.tabledt_冷藏貨庫存表.數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set數量Null()
            Me(Me.tabledt_冷藏貨庫存表.數量Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is製造日期Null() As Boolean
            Return Me.IsNull(Me.tabledt_冷藏貨庫存表.製造日期Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set製造日期Null()
            Me(Me.tabledt_冷藏貨庫存表.製造日期Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is未入庫數量Null() As Boolean
            Return Me.IsNull(Me.tabledt_冷藏貨庫存表.未入庫數量Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set未入庫數量Null()
            Me(Me.tabledt_冷藏貨庫存表.未入庫數量Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtThroughputRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtThroughputRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtThroughputRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtThroughputRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtMeltsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtMeltsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtMeltsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtMeltsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtTransportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtTransportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtTransportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtTransportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtFeedingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtFeedingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtFeedingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtFeedingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtOutDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtOutDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtOutDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtOutDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtOutStatisticRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtOutStatisticRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtOutStatisticRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtOutStatisticRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtInDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtInDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtInDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtInDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtInStatisticRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtInStatisticRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtInStatisticRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtInStatisticRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtAdjustDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtAdjustDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtAdjustDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtAdjustDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtAdjustStatisticRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtAdjustStatisticRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtAdjustStatisticRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtAdjustStatisticRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCarDrDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCarDrDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCarDrDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCarDrDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCarDrStatisticRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCarDrStatisticRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCarDrStatisticRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCarDrStatisticRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtEBStatisticRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtEBStatisticRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtEBStatisticRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtEBStatisticRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EBStatementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EBStatementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EBStatementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EBStatementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCSDGV1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCSDGV1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCSDGV1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCSDGV1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCSDGV5RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCSDGV5Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCSDGV5Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCSDGV5Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCSDGV2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCSDGV2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCSDGV2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCSDGV2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCSDGV3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCSDGV3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCSDGV3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCSDGV3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCSDGV4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCSDGV4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCSDGV4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCSDGV4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPayment1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPayment1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPayment1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPayment1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPayment2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPayment2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPayment2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPayment2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPayment3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPayment3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPayment3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPayment3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtSchedulingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtSchedulingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtSchedulingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtSchedulingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtSPickingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtSPickingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtSPickingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtSPickingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtSPicking1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtSPicking1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtSPicking1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtSPicking1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtDispatchingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtDispatchingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtDispatchingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtDispatchingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_KS_Z_StockApply_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_KS_Z_StockApply_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_KS_Z_StockApply_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_KS_Z_StockApply_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_KS_Z_WelfareRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_KS_Z_WelfareRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_KS_Z_WelfareRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_KS_Z_WelfareRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_KS_A_EC_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_KS_A_EC_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_KS_A_EC_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_KS_A_EC_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_KS_A_ECOrder_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_KS_A_ECOrder_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_KS_A_ECOrder_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_KS_A_ECOrder_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_加工原料肉領料單RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_加工原料肉領料單Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_加工原料肉領料單Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_加工原料肉領料單Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_冷藏貨庫存表RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_冷藏貨庫存表Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_冷藏貨庫存表Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_冷藏貨庫存表Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
